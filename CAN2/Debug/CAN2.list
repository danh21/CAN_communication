
CAN2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c90  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed0  08003ed0  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed8  08003ed8  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08003ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020238  2**0
                  CONTENTS
 10 .bss          000000e0  20000238  20000238  00020238  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000318  20000318  00020238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ac2a  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018c2  00000000  00000000  0002ae92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007a8  00000000  00000000  0002cf88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9e5  00000000  00000000  0002d730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009b5e  00000000  00000000  0004d115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1307  00000000  00000000  00056c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117f7a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002120  00000000  00000000  00117fcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000238 	.word	0x20000238
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e00 	.word	0x08003e00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000023c 	.word	0x2000023c
 80001c4:	08003e00 	.word	0x08003e00

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)		/* callback when receiving data on CAN bus */
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80004d6:	4a07      	ldr	r2, [pc, #28]	; (80004f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80004d8:	2100      	movs	r1, #0
 80004da:	4807      	ldr	r0, [pc, #28]	; (80004f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004dc:	f001 f977 	bl	80017ce <HAL_CAN_GetRxMessage>
    flagRx_CAN = 0x01;
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000300 	.word	0x20000300
 80004f4:	200002c4 	.word	0x200002c4
 80004f8:	20000254 	.word	0x20000254
 80004fc:	20000308 	.word	0x20000308

08000500 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)						/* callback when button is pressed */
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0)
 800050a:	88fb      	ldrh	r3, [r7, #6]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d115      	bne.n	800053c <HAL_GPIO_EXTI_Callback+0x3c>
	{
		/* data is transmitted */
		TxData[0] = 0x8E;	// its own ID
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <HAL_GPIO_EXTI_Callback+0x44>)
 8000512:	228e      	movs	r2, #142	; 0x8e
 8000514:	701a      	strb	r2, [r3, #0]
		TxData[1] = 0xFF;	// button is pressed
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_GPIO_EXTI_Callback+0x44>)
 8000518:	22ff      	movs	r2, #255	; 0xff
 800051a:	705a      	strb	r2, [r3, #1]

		/* transmit message on the CAN bus */
		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <HAL_GPIO_EXTI_Callback+0x48>)
 800051e:	4a09      	ldr	r2, [pc, #36]	; (8000544 <HAL_GPIO_EXTI_Callback+0x44>)
 8000520:	490a      	ldr	r1, [pc, #40]	; (800054c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000522:	480b      	ldr	r0, [pc, #44]	; (8000550 <HAL_GPIO_EXTI_Callback+0x50>)
 8000524:	f001 f878 	bl	8001618 <HAL_CAN_AddTxMessage>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <HAL_GPIO_EXTI_Callback+0x32>
			Error_Handler();
 800052e:	f000 fc5b 	bl	8000de8 <Error_Handler>

		// its own monitor displays information
		HAL_UART_Transmit_IT(&huart1, mess_btn2, sizeof(mess_btn2));
 8000532:	2264      	movs	r2, #100	; 0x64
 8000534:	4907      	ldr	r1, [pc, #28]	; (8000554 <HAL_GPIO_EXTI_Callback+0x54>)
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <HAL_GPIO_EXTI_Callback+0x58>)
 8000538:	f002 fcc7 	bl	8002eca <HAL_UART_Transmit_IT>
	}
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200002f8 	.word	0x200002f8
 8000548:	200002c0 	.word	0x200002c0
 800054c:	200002e0 	.word	0x200002e0
 8000550:	20000254 	.word	0x20000254
 8000554:	20000100 	.word	0x20000100
 8000558:	2000027c 	.word	0x2000027c

0800055c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)				/* callback when receiving data from its own monitor */
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <HAL_UART_RxCpltCallback+0xbc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d149      	bne.n	8000604 <HAL_UART_RxCpltCallback+0xa8>
	{
		HAL_UART_Receive_IT(&huart1, UARTbuffer, 3);									// active for next interrupt
 8000570:	2203      	movs	r2, #3
 8000572:	492a      	ldr	r1, [pc, #168]	; (800061c <HAL_UART_RxCpltCallback+0xc0>)
 8000574:	4828      	ldr	r0, [pc, #160]	; (8000618 <HAL_UART_RxCpltCallback+0xbc>)
 8000576:	f002 fced 	bl	8002f54 <HAL_UART_Receive_IT>

		flagRx_UART = 0x01;																// mark
 800057a:	4b29      	ldr	r3, [pc, #164]	; (8000620 <HAL_UART_RxCpltCallback+0xc4>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]

		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, UARTbuffer, &TxMailbox) != HAL_OK)	// transmit that data on CAN bus
 8000580:	4b28      	ldr	r3, [pc, #160]	; (8000624 <HAL_UART_RxCpltCallback+0xc8>)
 8000582:	4a26      	ldr	r2, [pc, #152]	; (800061c <HAL_UART_RxCpltCallback+0xc0>)
 8000584:	4928      	ldr	r1, [pc, #160]	; (8000628 <HAL_UART_RxCpltCallback+0xcc>)
 8000586:	4829      	ldr	r0, [pc, #164]	; (800062c <HAL_UART_RxCpltCallback+0xd0>)
 8000588:	f001 f846 	bl	8001618 <HAL_CAN_AddTxMessage>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <HAL_UART_RxCpltCallback+0x3a>
			Error_Handler();
 8000592:	f000 fc29 	bl	8000de8 <Error_Handler>

		if (UARTbuffer[0] == 0x8E)														// control its own led
 8000596:	4b21      	ldr	r3, [pc, #132]	; (800061c <HAL_UART_RxCpltCallback+0xc0>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b8e      	cmp	r3, #142	; 0x8e
 800059c:	d132      	bne.n	8000604 <HAL_UART_RxCpltCallback+0xa8>
		{
			switch (UARTbuffer[1])
 800059e:	4b1f      	ldr	r3, [pc, #124]	; (800061c <HAL_UART_RxCpltCallback+0xc0>)
 80005a0:	785b      	ldrb	r3, [r3, #1]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d002      	beq.n	80005ac <HAL_UART_RxCpltCallback+0x50>
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	d016      	beq.n	80005d8 <HAL_UART_RxCpltCallback+0x7c>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
					break;
			}
		}
	}
}
 80005aa:	e030      	b.n	800060e <HAL_UART_RxCpltCallback+0xb2>
					if (UARTbuffer[2] == 0x01)											// turn on
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <HAL_UART_RxCpltCallback+0xc0>)
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d106      	bne.n	80005c2 <HAL_UART_RxCpltCallback+0x66>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ba:	481d      	ldr	r0, [pc, #116]	; (8000630 <HAL_UART_RxCpltCallback+0xd4>)
 80005bc:	f001 ffae 	bl	800251c <HAL_GPIO_WritePin>
					break;
 80005c0:	e022      	b.n	8000608 <HAL_UART_RxCpltCallback+0xac>
					else if (UARTbuffer[2] == 0x00)										// turn off
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <HAL_UART_RxCpltCallback+0xc0>)
 80005c4:	789b      	ldrb	r3, [r3, #2]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d11e      	bne.n	8000608 <HAL_UART_RxCpltCallback+0xac>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d0:	4817      	ldr	r0, [pc, #92]	; (8000630 <HAL_UART_RxCpltCallback+0xd4>)
 80005d2:	f001 ffa3 	bl	800251c <HAL_GPIO_WritePin>
					break;
 80005d6:	e017      	b.n	8000608 <HAL_UART_RxCpltCallback+0xac>
					if (UARTbuffer[2] == 0x01)											// turn on
 80005d8:	4b10      	ldr	r3, [pc, #64]	; (800061c <HAL_UART_RxCpltCallback+0xc0>)
 80005da:	789b      	ldrb	r3, [r3, #2]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d106      	bne.n	80005ee <HAL_UART_RxCpltCallback+0x92>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e6:	4812      	ldr	r0, [pc, #72]	; (8000630 <HAL_UART_RxCpltCallback+0xd4>)
 80005e8:	f001 ff98 	bl	800251c <HAL_GPIO_WritePin>
					break;
 80005ec:	e00e      	b.n	800060c <HAL_UART_RxCpltCallback+0xb0>
					else if (UARTbuffer[2] == 0x00)										// turn off
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <HAL_UART_RxCpltCallback+0xc0>)
 80005f0:	789b      	ldrb	r3, [r3, #2]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d10a      	bne.n	800060c <HAL_UART_RxCpltCallback+0xb0>
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005fc:	480c      	ldr	r0, [pc, #48]	; (8000630 <HAL_UART_RxCpltCallback+0xd4>)
 80005fe:	f001 ff8d 	bl	800251c <HAL_GPIO_WritePin>
					break;
 8000602:	e003      	b.n	800060c <HAL_UART_RxCpltCallback+0xb0>
		}
 8000604:	bf00      	nop
 8000606:	e002      	b.n	800060e <HAL_UART_RxCpltCallback+0xb2>
					break;
 8000608:	bf00      	nop
 800060a:	e000      	b.n	800060e <HAL_UART_RxCpltCallback+0xb2>
					break;
 800060c:	bf00      	nop
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000027c 	.word	0x2000027c
 800061c:	2000030c 	.word	0x2000030c
 8000620:	20000309 	.word	0x20000309
 8000624:	200002c0 	.word	0x200002c0
 8000628:	200002e0 	.word	0x200002e0
 800062c:	20000254 	.word	0x20000254
 8000630:	40020c00 	.word	0x40020c00

08000634 <NotifyLed>:



void NotifyLed(void)		/* display information about led of other devices on the monitor */
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	HAL_Delay(200);
 8000638:	20c8      	movs	r0, #200	; 0xc8
 800063a:	f000 fda9 	bl	8001190 <HAL_Delay>
	if (RxData[1] == 0x01)
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <NotifyLed+0x60>)
 8000640:	785b      	ldrb	r3, [r3, #1]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d105      	bne.n	8000652 <NotifyLed+0x1e>
		HAL_UART_Transmit_IT(&huart1, mess_chooseLed12, sizeof(mess_chooseLed12));
 8000646:	220f      	movs	r2, #15
 8000648:	4913      	ldr	r1, [pc, #76]	; (8000698 <NotifyLed+0x64>)
 800064a:	4814      	ldr	r0, [pc, #80]	; (800069c <NotifyLed+0x68>)
 800064c:	f002 fc3d 	bl	8002eca <HAL_UART_Transmit_IT>
 8000650:	e008      	b.n	8000664 <NotifyLed+0x30>
	else if (RxData[1] == 0x02)
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <NotifyLed+0x60>)
 8000654:	785b      	ldrb	r3, [r3, #1]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d104      	bne.n	8000664 <NotifyLed+0x30>
		HAL_UART_Transmit_IT(&huart1, mess_chooseLed13, sizeof(mess_chooseLed13));
 800065a:	220f      	movs	r2, #15
 800065c:	4910      	ldr	r1, [pc, #64]	; (80006a0 <NotifyLed+0x6c>)
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <NotifyLed+0x68>)
 8000660:	f002 fc33 	bl	8002eca <HAL_UART_Transmit_IT>

	HAL_Delay(200);
 8000664:	20c8      	movs	r0, #200	; 0xc8
 8000666:	f000 fd93 	bl	8001190 <HAL_Delay>
	if (RxData[2] == 0x01)
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <NotifyLed+0x60>)
 800066c:	789b      	ldrb	r3, [r3, #2]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d105      	bne.n	800067e <NotifyLed+0x4a>
		HAL_UART_Transmit_IT(&huart1, mess_turnOn, sizeof(mess_turnOn));
 8000672:	2209      	movs	r2, #9
 8000674:	490b      	ldr	r1, [pc, #44]	; (80006a4 <NotifyLed+0x70>)
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <NotifyLed+0x68>)
 8000678:	f002 fc27 	bl	8002eca <HAL_UART_Transmit_IT>
	else if (RxData[2] == 0x00)
		HAL_UART_Transmit_IT(&huart1, mess_turnOff, sizeof(mess_turnOff));
}
 800067c:	e008      	b.n	8000690 <NotifyLed+0x5c>
	else if (RxData[2] == 0x00)
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <NotifyLed+0x60>)
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d104      	bne.n	8000690 <NotifyLed+0x5c>
		HAL_UART_Transmit_IT(&huart1, mess_turnOff, sizeof(mess_turnOff));
 8000686:	220a      	movs	r2, #10
 8000688:	4907      	ldr	r1, [pc, #28]	; (80006a8 <NotifyLed+0x74>)
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <NotifyLed+0x68>)
 800068c:	f002 fc1d 	bl	8002eca <HAL_UART_Transmit_IT>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000300 	.word	0x20000300
 8000698:	20000064 	.word	0x20000064
 800069c:	2000027c 	.word	0x2000027c
 80006a0:	20000074 	.word	0x20000074
 80006a4:	20000084 	.word	0x20000084
 80006a8:	20000090 	.word	0x20000090

080006ac <ActiveLed>:



void ActiveLed(void)		/* display information and control its own led on the monitor */
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	switch (RxData[1])
 80006b0:	4b30      	ldr	r3, [pc, #192]	; (8000774 <ActiveLed+0xc8>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d002      	beq.n	80006be <ActiveLed+0x12>
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d02b      	beq.n	8000714 <ActiveLed+0x68>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
				HAL_UART_Transmit_IT(&huart1, mess_turnOff, sizeof(mess_turnOff));
			}
			break;
	}
}
 80006bc:	e058      	b.n	8000770 <ActiveLed+0xc4>
			HAL_Delay(200);
 80006be:	20c8      	movs	r0, #200	; 0xc8
 80006c0:	f000 fd66 	bl	8001190 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart1, mess_chooseLed12, sizeof(mess_chooseLed12));
 80006c4:	220f      	movs	r2, #15
 80006c6:	492c      	ldr	r1, [pc, #176]	; (8000778 <ActiveLed+0xcc>)
 80006c8:	482c      	ldr	r0, [pc, #176]	; (800077c <ActiveLed+0xd0>)
 80006ca:	f002 fbfe 	bl	8002eca <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 80006ce:	20c8      	movs	r0, #200	; 0xc8
 80006d0:	f000 fd5e 	bl	8001190 <HAL_Delay>
			if (RxData[2] == 0x01) {
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <ActiveLed+0xc8>)
 80006d6:	789b      	ldrb	r3, [r3, #2]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d10b      	bne.n	80006f4 <ActiveLed+0x48>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e2:	4827      	ldr	r0, [pc, #156]	; (8000780 <ActiveLed+0xd4>)
 80006e4:	f001 ff1a 	bl	800251c <HAL_GPIO_WritePin>
				HAL_UART_Transmit_IT(&huart1, mess_turnOn, sizeof(mess_turnOn));
 80006e8:	2209      	movs	r2, #9
 80006ea:	4926      	ldr	r1, [pc, #152]	; (8000784 <ActiveLed+0xd8>)
 80006ec:	4823      	ldr	r0, [pc, #140]	; (800077c <ActiveLed+0xd0>)
 80006ee:	f002 fbec 	bl	8002eca <HAL_UART_Transmit_IT>
			break;
 80006f2:	e03a      	b.n	800076a <ActiveLed+0xbe>
			else if(RxData[2] == 0x00) {
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <ActiveLed+0xc8>)
 80006f6:	789b      	ldrb	r3, [r3, #2]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d136      	bne.n	800076a <ActiveLed+0xbe>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000702:	481f      	ldr	r0, [pc, #124]	; (8000780 <ActiveLed+0xd4>)
 8000704:	f001 ff0a 	bl	800251c <HAL_GPIO_WritePin>
				HAL_UART_Transmit_IT(&huart1, mess_turnOff, sizeof(mess_turnOff));
 8000708:	220a      	movs	r2, #10
 800070a:	491f      	ldr	r1, [pc, #124]	; (8000788 <ActiveLed+0xdc>)
 800070c:	481b      	ldr	r0, [pc, #108]	; (800077c <ActiveLed+0xd0>)
 800070e:	f002 fbdc 	bl	8002eca <HAL_UART_Transmit_IT>
			break;
 8000712:	e02a      	b.n	800076a <ActiveLed+0xbe>
			HAL_Delay(200);
 8000714:	20c8      	movs	r0, #200	; 0xc8
 8000716:	f000 fd3b 	bl	8001190 <HAL_Delay>
			HAL_UART_Transmit_IT(&huart1, mess_chooseLed13, sizeof(mess_chooseLed13));
 800071a:	220f      	movs	r2, #15
 800071c:	491b      	ldr	r1, [pc, #108]	; (800078c <ActiveLed+0xe0>)
 800071e:	4817      	ldr	r0, [pc, #92]	; (800077c <ActiveLed+0xd0>)
 8000720:	f002 fbd3 	bl	8002eca <HAL_UART_Transmit_IT>
			HAL_Delay(200);
 8000724:	20c8      	movs	r0, #200	; 0xc8
 8000726:	f000 fd33 	bl	8001190 <HAL_Delay>
			if (RxData[2] == 0x01) {
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <ActiveLed+0xc8>)
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d10b      	bne.n	800074a <ActiveLed+0x9e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000732:	2201      	movs	r2, #1
 8000734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000738:	4811      	ldr	r0, [pc, #68]	; (8000780 <ActiveLed+0xd4>)
 800073a:	f001 feef 	bl	800251c <HAL_GPIO_WritePin>
				HAL_UART_Transmit_IT(&huart1, mess_turnOn, sizeof(mess_turnOn));
 800073e:	2209      	movs	r2, #9
 8000740:	4910      	ldr	r1, [pc, #64]	; (8000784 <ActiveLed+0xd8>)
 8000742:	480e      	ldr	r0, [pc, #56]	; (800077c <ActiveLed+0xd0>)
 8000744:	f002 fbc1 	bl	8002eca <HAL_UART_Transmit_IT>
			break;
 8000748:	e011      	b.n	800076e <ActiveLed+0xc2>
			else if (RxData[2] == 0x00) {
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <ActiveLed+0xc8>)
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10d      	bne.n	800076e <ActiveLed+0xc2>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	4809      	ldr	r0, [pc, #36]	; (8000780 <ActiveLed+0xd4>)
 800075a:	f001 fedf 	bl	800251c <HAL_GPIO_WritePin>
				HAL_UART_Transmit_IT(&huart1, mess_turnOff, sizeof(mess_turnOff));
 800075e:	220a      	movs	r2, #10
 8000760:	4909      	ldr	r1, [pc, #36]	; (8000788 <ActiveLed+0xdc>)
 8000762:	4806      	ldr	r0, [pc, #24]	; (800077c <ActiveLed+0xd0>)
 8000764:	f002 fbb1 	bl	8002eca <HAL_UART_Transmit_IT>
			break;
 8000768:	e001      	b.n	800076e <ActiveLed+0xc2>
			break;
 800076a:	bf00      	nop
 800076c:	e000      	b.n	8000770 <ActiveLed+0xc4>
			break;
 800076e:	bf00      	nop
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000300 	.word	0x20000300
 8000778:	20000064 	.word	0x20000064
 800077c:	2000027c 	.word	0x2000027c
 8000780:	40020c00 	.word	0x40020c00
 8000784:	20000084 	.word	0x20000084
 8000788:	20000090 	.word	0x20000090
 800078c:	20000074 	.word	0x20000074

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b5b0      	push	{r4, r5, r7, lr}
 8000792:	b0b4      	sub	sp, #208	; 0xd0
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  TxHeader.StdId = 0x8E;
 8000796:	4ba2      	ldr	r3, [pc, #648]	; (8000a20 <main+0x290>)
 8000798:	228e      	movs	r2, #142	; 0x8e
 800079a:	601a      	str	r2, [r3, #0]
  TxHeader.DLC = 8;
 800079c:	4ba0      	ldr	r3, [pc, #640]	; (8000a20 <main+0x290>)
 800079e:	2208      	movs	r2, #8
 80007a0:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80007a2:	4b9f      	ldr	r3, [pc, #636]	; (8000a20 <main+0x290>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80007a8:	4b9d      	ldr	r3, [pc, #628]	; (8000a20 <main+0x290>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ae:	f000 fc7d 	bl	80010ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b2:	f000 f9c5 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b6:	f000 faad 	bl	8000d14 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007ba:	f000 fa2b 	bl	8000c14 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80007be:	f000 fa7f 	bl	8000cc0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);												// start the CAN
 80007c2:	4898      	ldr	r0, [pc, #608]	; (8000a24 <main+0x294>)
 80007c4:	f000 fee4 	bl	8001590 <HAL_CAN_Start>

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);	// activate notification of receiving data
 80007c8:	2102      	movs	r1, #2
 80007ca:	4896      	ldr	r0, [pc, #600]	; (8000a24 <main+0x294>)
 80007cc:	f001 f911 	bl	80019f2 <HAL_CAN_ActivateNotification>

  HAL_UART_Receive_IT(&huart1, UARTbuffer, 3);							// receive data from its own monitor
 80007d0:	2203      	movs	r2, #3
 80007d2:	4995      	ldr	r1, [pc, #596]	; (8000a28 <main+0x298>)
 80007d4:	4895      	ldr	r0, [pc, #596]	; (8000a2c <main+0x29c>)
 80007d6:	f002 fbbd 	bl	8002f54 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* ------------------------- when receiving data on UART ------------------------- */
	  if (flagRx_UART == 0x01)
 80007da:	4b95      	ldr	r3, [pc, #596]	; (8000a30 <main+0x2a0>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d17d      	bne.n	80008de <main+0x14e>
	  {
		  HAL_UART_Transmit_IT(&huart1, mess_request, sizeof(mess_request));		// this device sends request to other ones
 80007e2:	2264      	movs	r2, #100	; 0x64
 80007e4:	4993      	ldr	r1, [pc, #588]	; (8000a34 <main+0x2a4>)
 80007e6:	4891      	ldr	r0, [pc, #580]	; (8000a2c <main+0x29c>)
 80007e8:	f002 fb6f 	bl	8002eca <HAL_UART_Transmit_IT>
		  HAL_Delay(200);
 80007ec:	20c8      	movs	r0, #200	; 0xc8
 80007ee:	f000 fccf 	bl	8001190 <HAL_Delay>

		  if (UARTbuffer[0] == 0x7E) {												/* select device */
 80007f2:	4b8d      	ldr	r3, [pc, #564]	; (8000a28 <main+0x298>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b7e      	cmp	r3, #126	; 0x7e
 80007f8:	d10d      	bne.n	8000816 <main+0x86>
			  uint8_t mess[] = "Board 1\n";
 80007fa:	4a8f      	ldr	r2, [pc, #572]	; (8000a38 <main+0x2a8>)
 80007fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000800:	ca07      	ldmia	r2, {r0, r1, r2}
 8000802:	c303      	stmia	r3!, {r0, r1}
 8000804:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 8000806:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800080a:	2209      	movs	r2, #9
 800080c:	4619      	mov	r1, r3
 800080e:	4887      	ldr	r0, [pc, #540]	; (8000a2c <main+0x29c>)
 8000810:	f002 fb5b 	bl	8002eca <HAL_UART_Transmit_IT>
 8000814:	e034      	b.n	8000880 <main+0xf0>
		  }
		  else if (UARTbuffer[0] == 0x8E) {
 8000816:	4b84      	ldr	r3, [pc, #528]	; (8000a28 <main+0x298>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b8e      	cmp	r3, #142	; 0x8e
 800081c:	d10d      	bne.n	800083a <main+0xaa>
			  uint8_t mess[] = "Board 2\n";
 800081e:	4a87      	ldr	r2, [pc, #540]	; (8000a3c <main+0x2ac>)
 8000820:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000824:	ca07      	ldmia	r2, {r0, r1, r2}
 8000826:	c303      	stmia	r3!, {r0, r1}
 8000828:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 800082a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800082e:	2209      	movs	r2, #9
 8000830:	4619      	mov	r1, r3
 8000832:	487e      	ldr	r0, [pc, #504]	; (8000a2c <main+0x29c>)
 8000834:	f002 fb49 	bl	8002eca <HAL_UART_Transmit_IT>
 8000838:	e022      	b.n	8000880 <main+0xf0>
		  }
		  else if (UARTbuffer[0] == 0x9E) {
 800083a:	4b7b      	ldr	r3, [pc, #492]	; (8000a28 <main+0x298>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b9e      	cmp	r3, #158	; 0x9e
 8000840:	d10d      	bne.n	800085e <main+0xce>
			  uint8_t mess[] = "Board 3\n";
 8000842:	4a7f      	ldr	r2, [pc, #508]	; (8000a40 <main+0x2b0>)
 8000844:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000848:	ca07      	ldmia	r2, {r0, r1, r2}
 800084a:	c303      	stmia	r3!, {r0, r1}
 800084c:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 800084e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000852:	2209      	movs	r2, #9
 8000854:	4619      	mov	r1, r3
 8000856:	4875      	ldr	r0, [pc, #468]	; (8000a2c <main+0x29c>)
 8000858:	f002 fb37 	bl	8002eca <HAL_UART_Transmit_IT>
 800085c:	e010      	b.n	8000880 <main+0xf0>
		  }
		  else if (UARTbuffer[0] == 0x6E) {
 800085e:	4b72      	ldr	r3, [pc, #456]	; (8000a28 <main+0x298>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b6e      	cmp	r3, #110	; 0x6e
 8000864:	d10c      	bne.n	8000880 <main+0xf0>
			  uint8_t mess[] = "Board 4\n";
 8000866:	4a77      	ldr	r2, [pc, #476]	; (8000a44 <main+0x2b4>)
 8000868:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800086c:	ca07      	ldmia	r2, {r0, r1, r2}
 800086e:	c303      	stmia	r3!, {r0, r1}
 8000870:	701a      	strb	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 8000872:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000876:	2209      	movs	r2, #9
 8000878:	4619      	mov	r1, r3
 800087a:	486c      	ldr	r0, [pc, #432]	; (8000a2c <main+0x29c>)
 800087c:	f002 fb25 	bl	8002eca <HAL_UART_Transmit_IT>
		  }
		  HAL_Delay(100);
 8000880:	2064      	movs	r0, #100	; 0x64
 8000882:	f000 fc85 	bl	8001190 <HAL_Delay>

		  if (UARTbuffer[1] == 0x01)												/* display info of chosen led */
 8000886:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <main+0x298>)
 8000888:	785b      	ldrb	r3, [r3, #1]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d105      	bne.n	800089a <main+0x10a>
			  HAL_UART_Transmit_IT(&huart1, mess_chooseLed12, sizeof(mess_chooseLed12));
 800088e:	220f      	movs	r2, #15
 8000890:	496d      	ldr	r1, [pc, #436]	; (8000a48 <main+0x2b8>)
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <main+0x29c>)
 8000894:	f002 fb19 	bl	8002eca <HAL_UART_Transmit_IT>
 8000898:	e008      	b.n	80008ac <main+0x11c>
		  else if (UARTbuffer[1] == 0x02)
 800089a:	4b63      	ldr	r3, [pc, #396]	; (8000a28 <main+0x298>)
 800089c:	785b      	ldrb	r3, [r3, #1]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d104      	bne.n	80008ac <main+0x11c>
			  HAL_UART_Transmit_IT(&huart1, mess_chooseLed13, sizeof(mess_chooseLed13));
 80008a2:	220f      	movs	r2, #15
 80008a4:	4969      	ldr	r1, [pc, #420]	; (8000a4c <main+0x2bc>)
 80008a6:	4861      	ldr	r0, [pc, #388]	; (8000a2c <main+0x29c>)
 80008a8:	f002 fb0f 	bl	8002eca <HAL_UART_Transmit_IT>
		  HAL_Delay(100);
 80008ac:	2064      	movs	r0, #100	; 0x64
 80008ae:	f000 fc6f 	bl	8001190 <HAL_Delay>

		  if (UARTbuffer[2] == 0x01)												/* display info of action */
 80008b2:	4b5d      	ldr	r3, [pc, #372]	; (8000a28 <main+0x298>)
 80008b4:	789b      	ldrb	r3, [r3, #2]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d105      	bne.n	80008c6 <main+0x136>
			  HAL_UART_Transmit_IT(&huart1, mess_turnOn, sizeof(mess_turnOn));
 80008ba:	2209      	movs	r2, #9
 80008bc:	4964      	ldr	r1, [pc, #400]	; (8000a50 <main+0x2c0>)
 80008be:	485b      	ldr	r0, [pc, #364]	; (8000a2c <main+0x29c>)
 80008c0:	f002 fb03 	bl	8002eca <HAL_UART_Transmit_IT>
 80008c4:	e008      	b.n	80008d8 <main+0x148>
		  else if (UARTbuffer[2] == 0x00)
 80008c6:	4b58      	ldr	r3, [pc, #352]	; (8000a28 <main+0x298>)
 80008c8:	789b      	ldrb	r3, [r3, #2]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d104      	bne.n	80008d8 <main+0x148>
			  HAL_UART_Transmit_IT(&huart1, mess_turnOff, sizeof(mess_turnOff));
 80008ce:	220a      	movs	r2, #10
 80008d0:	4960      	ldr	r1, [pc, #384]	; (8000a54 <main+0x2c4>)
 80008d2:	4856      	ldr	r0, [pc, #344]	; (8000a2c <main+0x29c>)
 80008d4:	f002 faf9 	bl	8002eca <HAL_UART_Transmit_IT>

		  flagRx_UART = 0;															// clear flag
 80008d8:	4b55      	ldr	r3, [pc, #340]	; (8000a30 <main+0x2a0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
	  }



	  /* ------------------------- when receiving data on CAN bus ------------------------- */
	  if (flagRx_CAN == 0x01)
 80008de:	4b5e      	ldr	r3, [pc, #376]	; (8000a58 <main+0x2c8>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	f47f af79 	bne.w	80007da <main+0x4a>
	  {
		  /* ---------------- handle command related to led ---------------- */
		  if (RxData[1] != 0xFF)
 80008e8:	4b5c      	ldr	r3, [pc, #368]	; (8000a5c <main+0x2cc>)
 80008ea:	785b      	ldrb	r3, [r3, #1]
 80008ec:	2bff      	cmp	r3, #255	; 0xff
 80008ee:	f000 80d6 	beq.w	8000a9e <main+0x30e>
		  {
			  if (RxHeader.StdId == 0x7E) {							/* display info of device which sends request */
 80008f2:	4b5b      	ldr	r3, [pc, #364]	; (8000a60 <main+0x2d0>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b7e      	cmp	r3, #126	; 0x7e
 80008f8:	d111      	bne.n	800091e <main+0x18e>
				  uint8_t mess[] = "Board 1 sends request to ";
 80008fa:	4b5a      	ldr	r3, [pc, #360]	; (8000a64 <main+0x2d4>)
 80008fc:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8000900:	461d      	mov	r5, r3
 8000902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000904:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000906:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800090a:	c403      	stmia	r4!, {r0, r1}
 800090c:	8022      	strh	r2, [r4, #0]
				  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 800090e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000912:	221a      	movs	r2, #26
 8000914:	4619      	mov	r1, r3
 8000916:	4845      	ldr	r0, [pc, #276]	; (8000a2c <main+0x29c>)
 8000918:	f002 fad7 	bl	8002eca <HAL_UART_Transmit_IT>
 800091c:	e040      	b.n	80009a0 <main+0x210>
			  }
			  else if (RxHeader.StdId == 0x8E) {
 800091e:	4b50      	ldr	r3, [pc, #320]	; (8000a60 <main+0x2d0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b8e      	cmp	r3, #142	; 0x8e
 8000924:	d111      	bne.n	800094a <main+0x1ba>
				  uint8_t mess[] = "Board 2 sends request to ";
 8000926:	4b50      	ldr	r3, [pc, #320]	; (8000a68 <main+0x2d8>)
 8000928:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800092c:	461d      	mov	r5, r3
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000936:	c403      	stmia	r4!, {r0, r1}
 8000938:	8022      	strh	r2, [r4, #0]
				  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 800093a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800093e:	221a      	movs	r2, #26
 8000940:	4619      	mov	r1, r3
 8000942:	483a      	ldr	r0, [pc, #232]	; (8000a2c <main+0x29c>)
 8000944:	f002 fac1 	bl	8002eca <HAL_UART_Transmit_IT>
 8000948:	e02a      	b.n	80009a0 <main+0x210>
			  }
			  else if (RxHeader.StdId == 0x9E) {
 800094a:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <main+0x2d0>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b9e      	cmp	r3, #158	; 0x9e
 8000950:	d111      	bne.n	8000976 <main+0x1e6>
				  uint8_t mess[] = "Board 3 sends request to ";
 8000952:	4b46      	ldr	r3, [pc, #280]	; (8000a6c <main+0x2dc>)
 8000954:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000958:	461d      	mov	r5, r3
 800095a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000962:	c403      	stmia	r4!, {r0, r1}
 8000964:	8022      	strh	r2, [r4, #0]
				  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 8000966:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800096a:	221a      	movs	r2, #26
 800096c:	4619      	mov	r1, r3
 800096e:	482f      	ldr	r0, [pc, #188]	; (8000a2c <main+0x29c>)
 8000970:	f002 faab 	bl	8002eca <HAL_UART_Transmit_IT>
 8000974:	e014      	b.n	80009a0 <main+0x210>
			  }
			  else if (RxHeader.StdId == 0x6E) {
 8000976:	4b3a      	ldr	r3, [pc, #232]	; (8000a60 <main+0x2d0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b6e      	cmp	r3, #110	; 0x6e
 800097c:	d110      	bne.n	80009a0 <main+0x210>
				  uint8_t mess[] = "Board 4 sends request to ";
 800097e:	4b3c      	ldr	r3, [pc, #240]	; (8000a70 <main+0x2e0>)
 8000980:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000984:	461d      	mov	r5, r3
 8000986:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000988:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800098e:	c403      	stmia	r4!, {r0, r1}
 8000990:	8022      	strh	r2, [r4, #0]
				  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 8000992:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000996:	221a      	movs	r2, #26
 8000998:	4619      	mov	r1, r3
 800099a:	4824      	ldr	r0, [pc, #144]	; (8000a2c <main+0x29c>)
 800099c:	f002 fa95 	bl	8002eca <HAL_UART_Transmit_IT>
			  }
			  HAL_Delay(200);
 80009a0:	20c8      	movs	r0, #200	; 0xc8
 80009a2:	f000 fbf5 	bl	8001190 <HAL_Delay>

			  if (RxData[0] == 0x7E) {								/* display info of device which is received request */
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <main+0x2cc>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b7e      	cmp	r3, #126	; 0x7e
 80009ac:	d10f      	bne.n	80009ce <main+0x23e>
				  uint8_t mess[] = "Board 1\n";
 80009ae:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <main+0x2a8>)
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80009b6:	c303      	stmia	r3!, {r0, r1}
 80009b8:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	2209      	movs	r2, #9
 80009c0:	4619      	mov	r1, r3
 80009c2:	481a      	ldr	r0, [pc, #104]	; (8000a2c <main+0x29c>)
 80009c4:	f002 fa81 	bl	8002eca <HAL_UART_Transmit_IT>
				  NotifyLed();										// don't care, just only display info
 80009c8:	f7ff fe34 	bl	8000634 <NotifyLed>
 80009cc:	e063      	b.n	8000a96 <main+0x306>
			  }
			  else if (RxData[0] == 0x8E) {
 80009ce:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <main+0x2cc>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b8e      	cmp	r3, #142	; 0x8e
 80009d4:	d10f      	bne.n	80009f6 <main+0x266>
				  uint8_t mess[] = "Board 2\n";
 80009d6:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <main+0x2ac>)
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80009de:	c303      	stmia	r3!, {r0, r1}
 80009e0:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 80009e2:	f107 0318 	add.w	r3, r7, #24
 80009e6:	2209      	movs	r2, #9
 80009e8:	4619      	mov	r1, r3
 80009ea:	4810      	ldr	r0, [pc, #64]	; (8000a2c <main+0x29c>)
 80009ec:	f002 fa6d 	bl	8002eca <HAL_UART_Transmit_IT>
				  ActiveLed();										// control its own led and display info
 80009f0:	f7ff fe5c 	bl	80006ac <ActiveLed>
 80009f4:	e04f      	b.n	8000a96 <main+0x306>
			  }
			  else if (RxData[0] == 0x9E) {
 80009f6:	4b19      	ldr	r3, [pc, #100]	; (8000a5c <main+0x2cc>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b9e      	cmp	r3, #158	; 0x9e
 80009fc:	d13a      	bne.n	8000a74 <main+0x2e4>
				  uint8_t mess[] = "Board 3\n";
 80009fe:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <main+0x2b0>)
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a06:	c303      	stmia	r3!, {r0, r1}
 8000a08:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2209      	movs	r2, #9
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <main+0x29c>)
 8000a14:	f002 fa59 	bl	8002eca <HAL_UART_Transmit_IT>
				  NotifyLed();										// don't care, just only display info
 8000a18:	f7ff fe0c 	bl	8000634 <NotifyLed>
 8000a1c:	e03b      	b.n	8000a96 <main+0x306>
 8000a1e:	bf00      	nop
 8000a20:	200002e0 	.word	0x200002e0
 8000a24:	20000254 	.word	0x20000254
 8000a28:	2000030c 	.word	0x2000030c
 8000a2c:	2000027c 	.word	0x2000027c
 8000a30:	20000309 	.word	0x20000309
 8000a34:	20000000 	.word	0x20000000
 8000a38:	08003e18 	.word	0x08003e18
 8000a3c:	08003e24 	.word	0x08003e24
 8000a40:	08003e30 	.word	0x08003e30
 8000a44:	08003e3c 	.word	0x08003e3c
 8000a48:	20000064 	.word	0x20000064
 8000a4c:	20000074 	.word	0x20000074
 8000a50:	20000084 	.word	0x20000084
 8000a54:	20000090 	.word	0x20000090
 8000a58:	20000308 	.word	0x20000308
 8000a5c:	20000300 	.word	0x20000300
 8000a60:	200002c4 	.word	0x200002c4
 8000a64:	08003e48 	.word	0x08003e48
 8000a68:	08003e64 	.word	0x08003e64
 8000a6c:	08003e80 	.word	0x08003e80
 8000a70:	08003e9c 	.word	0x08003e9c
			  }
			  else if (RxData[0] == 0x6E) {
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <main+0x390>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b6e      	cmp	r3, #110	; 0x6e
 8000a7a:	d10c      	bne.n	8000a96 <main+0x306>
				  uint8_t mess[] = "Board 4\n";
 8000a7c:	4a29      	ldr	r2, [pc, #164]	; (8000b24 <main+0x394>)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a82:	c303      	stmia	r3!, {r0, r1}
 8000a84:	701a      	strb	r2, [r3, #0]
				  HAL_UART_Transmit_IT(&huart1, mess, sizeof(mess));
 8000a86:	463b      	mov	r3, r7
 8000a88:	2209      	movs	r2, #9
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4826      	ldr	r0, [pc, #152]	; (8000b28 <main+0x398>)
 8000a8e:	f002 fa1c 	bl	8002eca <HAL_UART_Transmit_IT>
				  NotifyLed();										// don't care, just only display info
 8000a92:	f7ff fdcf 	bl	8000634 <NotifyLed>
			  }
			  HAL_Delay(100);
 8000a96:	2064      	movs	r0, #100	; 0x64
 8000a98:	f000 fb7a 	bl	8001190 <HAL_Delay>
 8000a9c:	e03c      	b.n	8000b18 <main+0x388>
		  }

		  /* ---------------- handle command related to button ---------------- */
		  else
		  {
			  switch (RxData[0]) 									/* display info of device whose button is pressed */
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <main+0x390>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b9e      	cmp	r3, #158	; 0x9e
 8000aa4:	d01d      	beq.n	8000ae2 <main+0x352>
 8000aa6:	2b9e      	cmp	r3, #158	; 0x9e
 8000aa8:	dc36      	bgt.n	8000b18 <main+0x388>
 8000aaa:	2b8e      	cmp	r3, #142	; 0x8e
 8000aac:	d00f      	beq.n	8000ace <main+0x33e>
 8000aae:	2b8e      	cmp	r3, #142	; 0x8e
 8000ab0:	dc32      	bgt.n	8000b18 <main+0x388>
 8000ab2:	2b6e      	cmp	r3, #110	; 0x6e
 8000ab4:	d01f      	beq.n	8000af6 <main+0x366>
 8000ab6:	2b7e      	cmp	r3, #126	; 0x7e
 8000ab8:	d12e      	bne.n	8000b18 <main+0x388>
			  {
				  case 0x7E:
					  if (RxData[1] == 0xFF)
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <main+0x390>)
 8000abc:	785b      	ldrb	r3, [r3, #1]
 8000abe:	2bff      	cmp	r3, #255	; 0xff
 8000ac0:	d123      	bne.n	8000b0a <main+0x37a>
						  HAL_UART_Transmit_IT(&huart1, mess_btn1, sizeof(mess_btn1));
 8000ac2:	2264      	movs	r2, #100	; 0x64
 8000ac4:	4919      	ldr	r1, [pc, #100]	; (8000b2c <main+0x39c>)
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <main+0x398>)
 8000ac8:	f002 f9ff 	bl	8002eca <HAL_UART_Transmit_IT>
					  break;
 8000acc:	e01d      	b.n	8000b0a <main+0x37a>
				  case 0x8E:
					  if (RxData[1] == 0xFF)
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <main+0x390>)
 8000ad0:	785b      	ldrb	r3, [r3, #1]
 8000ad2:	2bff      	cmp	r3, #255	; 0xff
 8000ad4:	d11b      	bne.n	8000b0e <main+0x37e>
						  HAL_UART_Transmit_IT(&huart1, mess_btn2, sizeof(mess_btn2));
 8000ad6:	2264      	movs	r2, #100	; 0x64
 8000ad8:	4915      	ldr	r1, [pc, #84]	; (8000b30 <main+0x3a0>)
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <main+0x398>)
 8000adc:	f002 f9f5 	bl	8002eca <HAL_UART_Transmit_IT>
					  break;
 8000ae0:	e015      	b.n	8000b0e <main+0x37e>
				  case 0x9E:
					  if (RxData[1] == 0xFF)
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <main+0x390>)
 8000ae4:	785b      	ldrb	r3, [r3, #1]
 8000ae6:	2bff      	cmp	r3, #255	; 0xff
 8000ae8:	d113      	bne.n	8000b12 <main+0x382>
						  HAL_UART_Transmit_IT(&huart1, mess_btn3, sizeof(mess_btn3));
 8000aea:	2264      	movs	r2, #100	; 0x64
 8000aec:	4911      	ldr	r1, [pc, #68]	; (8000b34 <main+0x3a4>)
 8000aee:	480e      	ldr	r0, [pc, #56]	; (8000b28 <main+0x398>)
 8000af0:	f002 f9eb 	bl	8002eca <HAL_UART_Transmit_IT>
					  break;
 8000af4:	e00d      	b.n	8000b12 <main+0x382>
				  case 0x6E:
					  if (RxData[1] == 0xFF)
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <main+0x390>)
 8000af8:	785b      	ldrb	r3, [r3, #1]
 8000afa:	2bff      	cmp	r3, #255	; 0xff
 8000afc:	d10b      	bne.n	8000b16 <main+0x386>
						  HAL_UART_Transmit_IT(&huart1, mess_btn4, sizeof(mess_btn4));
 8000afe:	2264      	movs	r2, #100	; 0x64
 8000b00:	490d      	ldr	r1, [pc, #52]	; (8000b38 <main+0x3a8>)
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <main+0x398>)
 8000b04:	f002 f9e1 	bl	8002eca <HAL_UART_Transmit_IT>
					  break;
 8000b08:	e005      	b.n	8000b16 <main+0x386>
					  break;
 8000b0a:	bf00      	nop
 8000b0c:	e004      	b.n	8000b18 <main+0x388>
					  break;
 8000b0e:	bf00      	nop
 8000b10:	e002      	b.n	8000b18 <main+0x388>
					  break;
 8000b12:	bf00      	nop
 8000b14:	e000      	b.n	8000b18 <main+0x388>
					  break;
 8000b16:	bf00      	nop
			  }
		  }

		  flagRx_CAN = 0;											// clear flag
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <main+0x3ac>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
	  if (flagRx_UART == 0x01)
 8000b1e:	e65c      	b.n	80007da <main+0x4a>
 8000b20:	20000300 	.word	0x20000300
 8000b24:	08003e3c 	.word	0x08003e3c
 8000b28:	2000027c 	.word	0x2000027c
 8000b2c:	2000009c 	.word	0x2000009c
 8000b30:	20000100 	.word	0x20000100
 8000b34:	20000164 	.word	0x20000164
 8000b38:	200001c8 	.word	0x200001c8
 8000b3c:	20000308 	.word	0x20000308

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	; 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2230      	movs	r2, #48	; 0x30
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f003 f94e 	bl	8003df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a27      	ldr	r2, [pc, #156]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <SystemClock_Config+0xcc>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <SystemClock_Config+0xd0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a21      	ldr	r2, [pc, #132]	; (8000c10 <SystemClock_Config+0xd0>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <SystemClock_Config+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000baa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000bb4:	23c0      	movs	r3, #192	; 0xc0
 8000bb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc0:	f107 0320 	add.w	r3, r7, #32
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fcdb 	bl	8002580 <HAL_RCC_OscConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bd0:	f000 f90a 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000be4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 ff3c 	bl	8002a70 <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bfe:	f000 f8f3 	bl	8000de8 <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	; 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c1a:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c1c:	4a27      	ldr	r2, [pc, #156]	; (8000cbc <MX_CAN1_Init+0xa8>)
 8000c1e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000c20:	4b25      	ldr	r3, [pc, #148]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c22:	2215      	movs	r2, #21
 8000c24:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c26:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c2c:	4b22      	ldr	r3, [pc, #136]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c32:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c38:	4b1f      	ldr	r3, [pc, #124]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c62:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000c64:	f000 fab8 	bl	80011d8 <HAL_CAN_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c6e:	f000 f8bb 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000c72:	2301      	movs	r3, #1
 8000c74:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 0;							// use for the filter Process
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;	// use for the Receive message
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x0000;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0000;				// do not compare any bits -> get all
 8000c86:	2300      	movs	r3, #0
 8000c88:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;				// 20-th -> 27-th bank is assigned to CAN 2 (total 28 banks for 2 CANs)
 8000c96:	2314      	movs	r3, #20
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24

    if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <MX_CAN1_Init+0xa4>)
 8000ca0:	f000 fb96 	bl	80013d0 <HAL_CAN_ConfigFilter>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_CAN1_Init+0x9a>
    {
  	  Error_Handler();
 8000caa:	f000 f89d 	bl	8000de8 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	3728      	adds	r7, #40	; 0x28
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000254 	.word	0x20000254
 8000cbc:	40006400 	.word	0x40006400

08000cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <MX_USART1_UART_Init+0x50>)
 8000cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cd8:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce4:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000ce6:	220c      	movs	r2, #12
 8000ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <MX_USART1_UART_Init+0x4c>)
 8000cf8:	f002 f89a 	bl	8002e30 <HAL_UART_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d02:	f000 f871 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000027c 	.word	0x2000027c
 8000d10:	40011000 	.word	0x40011000

08000d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b088      	sub	sp, #32
 8000d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a2a      	ldr	r2, [pc, #168]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a23      	ldr	r2, [pc, #140]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_GPIO_Init+0xc8>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d84:	4816      	ldr	r0, [pc, #88]	; (8000de0 <MX_GPIO_Init+0xcc>)
 8000d86:	f001 fbc9 	bl	800251c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 030c 	add.w	r3, r7, #12
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4811      	ldr	r0, [pc, #68]	; (8000de4 <MX_GPIO_Init+0xd0>)
 8000da0:	f001 fa20 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000da4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000da8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4808      	ldr	r0, [pc, #32]	; (8000de0 <MX_GPIO_Init+0xcc>)
 8000dbe:	f001 fa11 	bl	80021e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2006      	movs	r0, #6
 8000dc8:	f001 f943 	bl	8002052 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dcc:	2006      	movs	r0, #6
 8000dce:	f001 f95c 	bl	800208a <HAL_NVIC_EnableIRQ>

}
 8000dd2:	bf00      	nop
 8000dd4:	3720      	adds	r7, #32
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020c00 	.word	0x40020c00
 8000de4:	40020000 	.word	0x40020000

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <HAL_CAN_MspInit+0xa4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d13c      	bne.n	8000ee0 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b20      	ldr	r3, [pc, #128]	; (8000eec <HAL_CAN_MspInit+0xa8>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a1f      	ldr	r2, [pc, #124]	; (8000eec <HAL_CAN_MspInit+0xa8>)
 8000e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <HAL_CAN_MspInit+0xa8>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <HAL_CAN_MspInit+0xa8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a18      	ldr	r2, [pc, #96]	; (8000eec <HAL_CAN_MspInit+0xa8>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_CAN_MspInit+0xa8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <HAL_CAN_MspInit+0xac>)
 8000ebc:	f001 f992 	bl	80021e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2013      	movs	r0, #19
 8000ec6:	f001 f8c4 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000eca:	2013      	movs	r0, #19
 8000ecc:	f001 f8dd 	bl	800208a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	2014      	movs	r0, #20
 8000ed6:	f001 f8bc 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000eda:	2014      	movs	r0, #20
 8000edc:	f001 f8d5 	bl	800208a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	3728      	adds	r7, #40	; 0x28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40006400 	.word	0x40006400
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020000 	.word	0x40020000

08000ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08a      	sub	sp, #40	; 0x28
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a1d      	ldr	r2, [pc, #116]	; (8000f88 <HAL_UART_MspInit+0x94>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d134      	bne.n	8000f80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a1b      	ldr	r2, [pc, #108]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_UART_MspInit+0x98>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f60:	2307      	movs	r3, #7
 8000f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4809      	ldr	r0, [pc, #36]	; (8000f90 <HAL_UART_MspInit+0x9c>)
 8000f6c:	f001 f93a 	bl	80021e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2100      	movs	r1, #0
 8000f74:	2025      	movs	r0, #37	; 0x25
 8000f76:	f001 f86c 	bl	8002052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f7a:	2025      	movs	r0, #37	; 0x25
 8000f7c:	f001 f885 	bl	800208a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40011000 	.word	0x40011000
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40020000 	.word	0x40020000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe0:	f000 f8b6 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f001 faaf 	bl	8002550 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <CAN1_TX_IRQHandler+0x10>)
 8000ffe:	f000 fd1e 	bl	8001a3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000254 	.word	0x20000254

0800100c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <CAN1_RX0_IRQHandler+0x10>)
 8001012:	f000 fd14 	bl	8001a3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000254 	.word	0x20000254

08001020 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001024:	4802      	ldr	r0, [pc, #8]	; (8001030 <USART1_IRQHandler+0x10>)
 8001026:	f001 ffc5 	bl	8002fb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000027c 	.word	0x2000027c

08001034 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <SystemInit+0x20>)
 800103a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <SystemInit+0x20>)
 8001040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001090 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800105e:	490e      	ldr	r1, [pc, #56]	; (8001098 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001064:	e002      	b.n	800106c <LoopCopyDataInit>

08001066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800106a:	3304      	adds	r3, #4

0800106c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800106c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001070:	d3f9      	bcc.n	8001066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001074:	4c0b      	ldr	r4, [pc, #44]	; (80010a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001078:	e001      	b.n	800107e <LoopFillZerobss>

0800107a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800107a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800107c:	3204      	adds	r2, #4

0800107e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001080:	d3fb      	bcc.n	800107a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001082:	f7ff ffd7 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001086:	f002 fe8f 	bl	8003da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800108a:	f7ff fb81 	bl	8000790 <main>
  bx  lr    
 800108e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001090:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001098:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 800109c:	08003ee0 	.word	0x08003ee0
  ldr r2, =_sbss
 80010a0:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 80010a4:	20000318 	.word	0x20000318

080010a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010a8:	e7fe      	b.n	80010a8 <ADC_IRQHandler>
	...

080010ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b0:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0d      	ldr	r2, [pc, #52]	; (80010ec <HAL_Init+0x40>)
 80010b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_Init+0x40>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_Init+0x40>)
 80010c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x40>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x40>)
 80010ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 ffb1 	bl	800203c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	200f      	movs	r0, #15
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fe88 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023c00 	.word	0x40023c00

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 ffc9 	bl	80020a6 <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 ff91 	bl	8002052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	2000022c 	.word	0x2000022c
 8001148:	20000234 	.word	0x20000234
 800114c:	20000230 	.word	0x20000230

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000234 	.word	0x20000234
 8001174:	20000314 	.word	0x20000314

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000314 	.word	0x20000314

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000234 	.word	0x20000234

080011d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e0ed      	b.n	80013c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d102      	bne.n	80011fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fe24 	bl	8000e44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120c:	f7ff ffb4 	bl	8001178 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001212:	e012      	b.n	800123a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001214:	f7ff ffb0 	bl	8001178 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b0a      	cmp	r3, #10
 8001220:	d90b      	bls.n	800123a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2205      	movs	r2, #5
 8001232:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e0c5      	b.n	80013c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0e5      	beq.n	8001214 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f022 0202 	bic.w	r2, r2, #2
 8001256:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001258:	f7ff ff8e 	bl	8001178 <HAL_GetTick>
 800125c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800125e:	e012      	b.n	8001286 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001260:	f7ff ff8a 	bl	8001178 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b0a      	cmp	r3, #10
 800126c:	d90b      	bls.n	8001286 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2205      	movs	r2, #5
 800127e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e09f      	b.n	80013c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1e5      	bne.n	8001260 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	7e1b      	ldrb	r3, [r3, #24]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d108      	bne.n	80012ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e007      	b.n	80012be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7e5b      	ldrb	r3, [r3, #25]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d108      	bne.n	80012d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	e007      	b.n	80012e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	7e9b      	ldrb	r3, [r3, #26]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d108      	bne.n	8001302 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0220 	orr.w	r2, r2, #32
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	e007      	b.n	8001312 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f022 0220 	bic.w	r2, r2, #32
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7edb      	ldrb	r3, [r3, #27]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d108      	bne.n	800132c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 0210 	bic.w	r2, r2, #16
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	e007      	b.n	800133c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f042 0210 	orr.w	r2, r2, #16
 800133a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7f1b      	ldrb	r3, [r3, #28]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d108      	bne.n	8001356 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f042 0208 	orr.w	r2, r2, #8
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	e007      	b.n	8001366 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0208 	bic.w	r2, r2, #8
 8001364:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7f5b      	ldrb	r3, [r3, #29]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d108      	bne.n	8001380 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f042 0204 	orr.w	r2, r2, #4
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	e007      	b.n	8001390 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0204 	bic.w	r2, r2, #4
 800138e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	ea42 0103 	orr.w	r1, r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	1e5a      	subs	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013e8:	7cfb      	ldrb	r3, [r7, #19]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d003      	beq.n	80013f6 <HAL_CAN_ConfigFilter+0x26>
 80013ee:	7cfb      	ldrb	r3, [r7, #19]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	f040 80be 	bne.w	8001572 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80013f6:	4b65      	ldr	r3, [pc, #404]	; (800158c <HAL_CAN_ConfigFilter+0x1bc>)
 80013f8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001410:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	431a      	orrs	r2, r3
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f003 031f 	and.w	r3, r3, #31
 8001436:	2201      	movs	r2, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	401a      	ands	r2, r3
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d123      	bne.n	80014a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43db      	mvns	r3, r3
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800147a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	3248      	adds	r2, #72	; 0x48
 8001480:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001494:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001496:	6979      	ldr	r1, [r7, #20]
 8001498:	3348      	adds	r3, #72	; 0x48
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d122      	bne.n	80014ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80014c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3248      	adds	r2, #72	; 0x48
 80014ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014e4:	6979      	ldr	r1, [r7, #20]
 80014e6:	3348      	adds	r3, #72	; 0x48
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	440b      	add	r3, r1
 80014ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	43db      	mvns	r3, r3
 8001500:	401a      	ands	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001508:	e007      	b.n	800151a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	431a      	orrs	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	401a      	ands	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001534:	e007      	b.n	8001546 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	431a      	orrs	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d107      	bne.n	800155e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	431a      	orrs	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001564:	f023 0201 	bic.w	r2, r3, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e006      	b.n	8001580 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
  }
}
 8001580:	4618      	mov	r0, r3
 8001582:	371c      	adds	r7, #28
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	40006400 	.word	0x40006400

08001590 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d12e      	bne.n	8001602 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f022 0201 	bic.w	r2, r2, #1
 80015ba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015bc:	f7ff fddc 	bl	8001178 <HAL_GetTick>
 80015c0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015c2:	e012      	b.n	80015ea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015c4:	f7ff fdd8 	bl	8001178 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b0a      	cmp	r3, #10
 80015d0:	d90b      	bls.n	80015ea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2205      	movs	r2, #5
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e012      	b.n	8001610 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1e5      	bne.n	80015c4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e006      	b.n	8001610 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
  }
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	; 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800162c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001636:	7ffb      	ldrb	r3, [r7, #31]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d003      	beq.n	8001644 <HAL_CAN_AddTxMessage+0x2c>
 800163c:	7ffb      	ldrb	r3, [r7, #31]
 800163e:	2b02      	cmp	r3, #2
 8001640:	f040 80b8 	bne.w	80017b4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10a      	bne.n	8001664 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001654:	2b00      	cmp	r3, #0
 8001656:	d105      	bne.n	8001664 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80a0 	beq.w	80017a4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	0e1b      	lsrs	r3, r3, #24
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d907      	bls.n	8001684 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e09e      	b.n	80017c2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001684:	2201      	movs	r2, #1
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	409a      	lsls	r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d10d      	bne.n	80016b2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016a0:	68f9      	ldr	r1, [r7, #12]
 80016a2:	6809      	ldr	r1, [r1, #0]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3318      	adds	r3, #24
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	440b      	add	r3, r1
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	e00f      	b.n	80016d2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016bc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c2:	68f9      	ldr	r1, [r7, #12]
 80016c4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80016c6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3318      	adds	r3, #24
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	440b      	add	r3, r1
 80016d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6819      	ldr	r1, [r3, #0]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3318      	adds	r3, #24
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	440b      	add	r3, r1
 80016e2:	3304      	adds	r3, #4
 80016e4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	7d1b      	ldrb	r3, [r3, #20]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d111      	bne.n	8001712 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3318      	adds	r3, #24
 80016f6:	011b      	lsls	r3, r3, #4
 80016f8:	4413      	add	r3, r2
 80016fa:	3304      	adds	r3, #4
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	6811      	ldr	r1, [r2, #0]
 8001702:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3318      	adds	r3, #24
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	440b      	add	r3, r1
 800170e:	3304      	adds	r3, #4
 8001710:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3307      	adds	r3, #7
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	061a      	lsls	r2, r3, #24
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3306      	adds	r3, #6
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3305      	adds	r3, #5
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	4313      	orrs	r3, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	3204      	adds	r2, #4
 8001732:	7812      	ldrb	r2, [r2, #0]
 8001734:	4610      	mov	r0, r2
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	6811      	ldr	r1, [r2, #0]
 800173a:	ea43 0200 	orr.w	r2, r3, r0
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	440b      	add	r3, r1
 8001744:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001748:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3303      	adds	r3, #3
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	061a      	lsls	r2, r3, #24
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	3302      	adds	r3, #2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	041b      	lsls	r3, r3, #16
 800175a:	431a      	orrs	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3301      	adds	r3, #1
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	021b      	lsls	r3, r3, #8
 8001764:	4313      	orrs	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	7812      	ldrb	r2, [r2, #0]
 800176a:	4610      	mov	r0, r2
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	6811      	ldr	r1, [r2, #0]
 8001770:	ea43 0200 	orr.w	r2, r3, r0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	011b      	lsls	r3, r3, #4
 8001778:	440b      	add	r3, r1
 800177a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800177e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	3318      	adds	r3, #24
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	6811      	ldr	r1, [r2, #0]
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3318      	adds	r3, #24
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	440b      	add	r3, r1
 800179e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e00e      	b.n	80017c2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e006      	b.n	80017c2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
  }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3724      	adds	r7, #36	; 0x24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017ce:	b480      	push	{r7}
 80017d0:	b087      	sub	sp, #28
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	60f8      	str	r0, [r7, #12]
 80017d6:	60b9      	str	r1, [r7, #8]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017e4:	7dfb      	ldrb	r3, [r7, #23]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d003      	beq.n	80017f2 <HAL_CAN_GetRxMessage+0x24>
 80017ea:	7dfb      	ldrb	r3, [r7, #23]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	f040 80f3 	bne.w	80019d8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10e      	bne.n	8001816 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d116      	bne.n	8001834 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e0e7      	b.n	80019e6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d107      	bne.n	8001834 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0d8      	b.n	80019e6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	331b      	adds	r3, #27
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0204 	and.w	r2, r3, #4
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	331b      	adds	r3, #27
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	4413      	add	r3, r2
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0d5b      	lsrs	r3, r3, #21
 8001862:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	e00b      	b.n	8001884 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	331b      	adds	r3, #27
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	4413      	add	r3, r2
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	331b      	adds	r3, #27
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	4413      	add	r3, r2
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0202 	and.w	r2, r3, #2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	331b      	adds	r3, #27
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	3304      	adds	r3, #4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 020f 	and.w	r2, r3, #15
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	331b      	adds	r3, #27
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	3304      	adds	r3, #4
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	331b      	adds	r3, #27
 80018d2:	011b      	lsls	r3, r3, #4
 80018d4:	4413      	add	r3, r2
 80018d6:	3304      	adds	r3, #4
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	0c1b      	lsrs	r3, r3, #16
 80018dc:	b29a      	uxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	4413      	add	r3, r2
 8001902:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0a1a      	lsrs	r2, r3, #8
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	4413      	add	r3, r2
 800191c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	0c1a      	lsrs	r2, r3, #16
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	3302      	adds	r3, #2
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	4413      	add	r3, r2
 8001936:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	0e1a      	lsrs	r2, r3, #24
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	3303      	adds	r3, #3
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	3304      	adds	r3, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	011b      	lsls	r3, r3, #4
 8001966:	4413      	add	r3, r2
 8001968:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0a1a      	lsrs	r2, r3, #8
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	3305      	adds	r3, #5
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	011b      	lsls	r3, r3, #4
 8001980:	4413      	add	r3, r2
 8001982:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	0c1a      	lsrs	r2, r3, #16
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	3306      	adds	r3, #6
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	4413      	add	r3, r2
 800199c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	0e1a      	lsrs	r2, r3, #24
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	3307      	adds	r3, #7
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d108      	bne.n	80019c4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0220 	orr.w	r2, r2, #32
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	e007      	b.n	80019d4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	691a      	ldr	r2, [r3, #16]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 0220 	orr.w	r2, r2, #32
 80019d2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e006      	b.n	80019e6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
  }
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b085      	sub	sp, #20
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a02:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d002      	beq.n	8001a10 <HAL_CAN_ActivateNotification+0x1e>
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d109      	bne.n	8001a24 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6959      	ldr	r1, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e006      	b.n	8001a32 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
  }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b08a      	sub	sp, #40	; 0x28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d07c      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d023      	beq.n	8001ad6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2201      	movs	r2, #1
 8001a94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f983 	bl	8001dac <HAL_CAN_TxMailbox0CompleteCallback>
 8001aa6:	e016      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aba:	e00c      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	e002      	b.n	8001ad6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 f989 	bl	8001de8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d024      	beq.n	8001b2a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f963 	bl	8001dc0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001afa:	e016      	b.n	8001b2a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d004      	beq.n	8001b10 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0e:	e00c      	b.n	8001b2a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
 8001b22:	e002      	b.n	8001b2a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f969 	bl	8001dfc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d024      	beq.n	8001b7e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b3c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 f943 	bl	8001dd4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b4e:	e016      	b.n	8001b7e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
 8001b62:	e00c      	b.n	8001b7e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
 8001b76:	e002      	b.n	8001b7e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f000 f949 	bl	8001e10 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b7e:	6a3b      	ldr	r3, [r7, #32]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00c      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2210      	movs	r2, #16
 8001ba0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00b      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d006      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2208      	movs	r2, #8
 8001bbc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f930 	bl	8001e24 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d009      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d002      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7fe fc75 	bl	80004cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00c      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d007      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2210      	movs	r2, #16
 8001c04:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c06:	6a3b      	ldr	r3, [r7, #32]
 8001c08:	f003 0320 	and.w	r3, r3, #32
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d006      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2208      	movs	r2, #8
 8001c20:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f912 	bl	8001e4c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d009      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f8f9 	bl	8001e38 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00b      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2210      	movs	r2, #16
 8001c60:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f8fc 	bl	8001e60 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d006      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2208      	movs	r2, #8
 8001c82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f8f5 	bl	8001e74 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d07b      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d072      	beq.n	8001d84 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d008      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d043      	beq.n	8001d84 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d03e      	beq.n	8001d84 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d0c:	2b60      	cmp	r3, #96	; 0x60
 8001d0e:	d02b      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x32a>
 8001d10:	2b60      	cmp	r3, #96	; 0x60
 8001d12:	d82e      	bhi.n	8001d72 <HAL_CAN_IRQHandler+0x334>
 8001d14:	2b50      	cmp	r3, #80	; 0x50
 8001d16:	d022      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x320>
 8001d18:	2b50      	cmp	r3, #80	; 0x50
 8001d1a:	d82a      	bhi.n	8001d72 <HAL_CAN_IRQHandler+0x334>
 8001d1c:	2b40      	cmp	r3, #64	; 0x40
 8001d1e:	d019      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x316>
 8001d20:	2b40      	cmp	r3, #64	; 0x40
 8001d22:	d826      	bhi.n	8001d72 <HAL_CAN_IRQHandler+0x334>
 8001d24:	2b30      	cmp	r3, #48	; 0x30
 8001d26:	d010      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x30c>
 8001d28:	2b30      	cmp	r3, #48	; 0x30
 8001d2a:	d822      	bhi.n	8001d72 <HAL_CAN_IRQHandler+0x334>
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d002      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x2f8>
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d005      	beq.n	8001d40 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d34:	e01d      	b.n	8001d72 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	f043 0308 	orr.w	r3, r3, #8
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d3e:	e019      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	f043 0310 	orr.w	r3, r3, #16
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d48:	e014      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	f043 0320 	orr.w	r3, r3, #32
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d52:	e00f      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d5c:	e00a      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d66:	e005      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d70:	e000      	b.n	8001d74 <HAL_CAN_IRQHandler+0x336>
            break;
 8001d72:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d82:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2204      	movs	r2, #4
 8001d8a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d008      	beq.n	8001da4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f872 	bl	8001e88 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001da4:	bf00      	nop
 8001da6:	3728      	adds	r7, #40	; 0x28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <__NVIC_EnableIRQ+0x38>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100

08001f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db0a      	blt.n	8001f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	490c      	ldr	r1, [pc, #48]	; (8001f88 <__NVIC_SetPriority+0x4c>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f64:	e00a      	b.n	8001f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4908      	ldr	r1, [pc, #32]	; (8001f8c <__NVIC_SetPriority+0x50>)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3b04      	subs	r3, #4
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	440b      	add	r3, r1
 8001f7a:	761a      	strb	r2, [r3, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f1c3 0307 	rsb	r3, r3, #7
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	bf28      	it	cs
 8001fae:	2304      	movcs	r3, #4
 8001fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d902      	bls.n	8001fc0 <NVIC_EncodePriority+0x30>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3b03      	subs	r3, #3
 8001fbe:	e000      	b.n	8001fc2 <NVIC_EncodePriority+0x32>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	43d9      	mvns	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	4313      	orrs	r3, r2
         );
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3b01      	subs	r3, #1
 8002004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002008:	d301      	bcc.n	800200e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200a:	2301      	movs	r3, #1
 800200c:	e00f      	b.n	800202e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <SysTick_Config+0x40>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3b01      	subs	r3, #1
 8002014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002016:	210f      	movs	r1, #15
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f7ff ff8e 	bl	8001f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <SysTick_Config+0x40>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <SysTick_Config+0x40>)
 8002028:	2207      	movs	r2, #7
 800202a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010

0800203c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7ff ff29 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002052:	b580      	push	{r7, lr}
 8002054:	b086      	sub	sp, #24
 8002056:	af00      	add	r7, sp, #0
 8002058:	4603      	mov	r3, r0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002064:	f7ff ff3e 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	6978      	ldr	r0, [r7, #20]
 8002070:	f7ff ff8e 	bl	8001f90 <NVIC_EncodePriority>
 8002074:	4602      	mov	r2, r0
 8002076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff ff5d 	bl	8001f3c <__NVIC_SetPriority>
}
 8002082:	bf00      	nop
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	4603      	mov	r3, r0
 8002092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ff31 	bl	8001f00 <__NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ffa2 	bl	8001ff8 <SysTick_Config>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020cc:	f7ff f854 	bl	8001178 <HAL_GetTick>
 80020d0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d008      	beq.n	80020f0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2280      	movs	r2, #128	; 0x80
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e052      	b.n	8002196 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0216 	bic.w	r2, r2, #22
 80020fe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695a      	ldr	r2, [r3, #20]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800210e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d103      	bne.n	8002120 <HAL_DMA_Abort+0x62>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211c:	2b00      	cmp	r3, #0
 800211e:	d007      	beq.n	8002130 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0208 	bic.w	r2, r2, #8
 800212e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002140:	e013      	b.n	800216a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002142:	f7ff f819 	bl	8001178 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b05      	cmp	r3, #5
 800214e:	d90c      	bls.n	800216a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2220      	movs	r2, #32
 8002154:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2203      	movs	r2, #3
 800215a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e015      	b.n	8002196 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1e4      	bne.n	8002142 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	223f      	movs	r2, #63	; 0x3f
 800217e:	409a      	lsls	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d004      	beq.n	80021bc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e00c      	b.n	80021d6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2205      	movs	r2, #5
 80021c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0201 	bic.w	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	; 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	e16b      	b.n	80024d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002200:	2201      	movs	r2, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	429a      	cmp	r2, r3
 800221a:	f040 815a 	bne.w	80024d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d005      	beq.n	8002236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002232:	2b02      	cmp	r3, #2
 8002234:	d130      	bne.n	8002298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800226c:	2201      	movs	r2, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 0201 	and.w	r2, r3, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d017      	beq.n	80022d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d123      	bne.n	8002328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3208      	adds	r2, #8
 8002322:	69b9      	ldr	r1, [r7, #24]
 8002324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0203 	and.w	r2, r3, #3
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80b4 	beq.w	80024d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b60      	ldr	r3, [pc, #384]	; (80024f0 <HAL_GPIO_Init+0x30c>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	4a5f      	ldr	r2, [pc, #380]	; (80024f0 <HAL_GPIO_Init+0x30c>)
 8002374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002378:	6453      	str	r3, [r2, #68]	; 0x44
 800237a:	4b5d      	ldr	r3, [pc, #372]	; (80024f0 <HAL_GPIO_Init+0x30c>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002386:	4a5b      	ldr	r2, [pc, #364]	; (80024f4 <HAL_GPIO_Init+0x310>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a52      	ldr	r2, [pc, #328]	; (80024f8 <HAL_GPIO_Init+0x314>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d02b      	beq.n	800240a <HAL_GPIO_Init+0x226>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a51      	ldr	r2, [pc, #324]	; (80024fc <HAL_GPIO_Init+0x318>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d025      	beq.n	8002406 <HAL_GPIO_Init+0x222>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a50      	ldr	r2, [pc, #320]	; (8002500 <HAL_GPIO_Init+0x31c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01f      	beq.n	8002402 <HAL_GPIO_Init+0x21e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4f      	ldr	r2, [pc, #316]	; (8002504 <HAL_GPIO_Init+0x320>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d019      	beq.n	80023fe <HAL_GPIO_Init+0x21a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4e      	ldr	r2, [pc, #312]	; (8002508 <HAL_GPIO_Init+0x324>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0x216>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4d      	ldr	r2, [pc, #308]	; (800250c <HAL_GPIO_Init+0x328>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d00d      	beq.n	80023f6 <HAL_GPIO_Init+0x212>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4c      	ldr	r2, [pc, #304]	; (8002510 <HAL_GPIO_Init+0x32c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d007      	beq.n	80023f2 <HAL_GPIO_Init+0x20e>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4b      	ldr	r2, [pc, #300]	; (8002514 <HAL_GPIO_Init+0x330>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d101      	bne.n	80023ee <HAL_GPIO_Init+0x20a>
 80023ea:	2307      	movs	r3, #7
 80023ec:	e00e      	b.n	800240c <HAL_GPIO_Init+0x228>
 80023ee:	2308      	movs	r3, #8
 80023f0:	e00c      	b.n	800240c <HAL_GPIO_Init+0x228>
 80023f2:	2306      	movs	r3, #6
 80023f4:	e00a      	b.n	800240c <HAL_GPIO_Init+0x228>
 80023f6:	2305      	movs	r3, #5
 80023f8:	e008      	b.n	800240c <HAL_GPIO_Init+0x228>
 80023fa:	2304      	movs	r3, #4
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x228>
 80023fe:	2303      	movs	r3, #3
 8002400:	e004      	b.n	800240c <HAL_GPIO_Init+0x228>
 8002402:	2302      	movs	r3, #2
 8002404:	e002      	b.n	800240c <HAL_GPIO_Init+0x228>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_GPIO_Init+0x228>
 800240a:	2300      	movs	r3, #0
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	f002 0203 	and.w	r2, r2, #3
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	4093      	lsls	r3, r2
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241c:	4935      	ldr	r1, [pc, #212]	; (80024f4 <HAL_GPIO_Init+0x310>)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242a:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <HAL_GPIO_Init+0x334>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244e:	4a32      	ldr	r2, [pc, #200]	; (8002518 <HAL_GPIO_Init+0x334>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002454:	4b30      	ldr	r3, [pc, #192]	; (8002518 <HAL_GPIO_Init+0x334>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002478:	4a27      	ldr	r2, [pc, #156]	; (8002518 <HAL_GPIO_Init+0x334>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247e:	4b26      	ldr	r3, [pc, #152]	; (8002518 <HAL_GPIO_Init+0x334>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a2:	4a1d      	ldr	r2, [pc, #116]	; (8002518 <HAL_GPIO_Init+0x334>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <HAL_GPIO_Init+0x334>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024cc:	4a12      	ldr	r2, [pc, #72]	; (8002518 <HAL_GPIO_Init+0x334>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b0f      	cmp	r3, #15
 80024dc:	f67f ae90 	bls.w	8002200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020400 	.word	0x40020400
 8002500:	40020800 	.word	0x40020800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40021000 	.word	0x40021000
 800250c:	40021400 	.word	0x40021400
 8002510:	40021800 	.word	0x40021800
 8002514:	40021c00 	.word	0x40021c00
 8002518:	40013c00 	.word	0x40013c00

0800251c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	807b      	strh	r3, [r7, #2]
 8002528:	4613      	mov	r3, r2
 800252a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800252c:	787b      	ldrb	r3, [r7, #1]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002532:	887a      	ldrh	r2, [r7, #2]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002538:	e003      	b.n	8002542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800253a:	887b      	ldrh	r3, [r7, #2]
 800253c:	041a      	lsls	r2, r3, #16
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	619a      	str	r2, [r3, #24]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800255c:	695a      	ldr	r2, [r3, #20]
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4013      	ands	r3, r2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fd ffc6 	bl	8000500 <HAL_GPIO_EXTI_Callback>
  }
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40013c00 	.word	0x40013c00

08002580 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d101      	bne.n	8002592 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e267      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d075      	beq.n	800268a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800259e:	4b88      	ldr	r3, [pc, #544]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	d00c      	beq.n	80025c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025aa:	4b85      	ldr	r3, [pc, #532]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d112      	bne.n	80025dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025b6:	4b82      	ldr	r3, [pc, #520]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c2:	d10b      	bne.n	80025dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c4:	4b7e      	ldr	r3, [pc, #504]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d05b      	beq.n	8002688 <HAL_RCC_OscConfig+0x108>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d157      	bne.n	8002688 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e242      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e4:	d106      	bne.n	80025f4 <HAL_RCC_OscConfig+0x74>
 80025e6:	4b76      	ldr	r3, [pc, #472]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a75      	ldr	r2, [pc, #468]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 80025ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e01d      	b.n	8002630 <HAL_RCC_OscConfig+0xb0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x98>
 80025fe:	4b70      	ldr	r3, [pc, #448]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a6f      	ldr	r2, [pc, #444]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002604:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b6d      	ldr	r3, [pc, #436]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6c      	ldr	r2, [pc, #432]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e00b      	b.n	8002630 <HAL_RCC_OscConfig+0xb0>
 8002618:	4b69      	ldr	r3, [pc, #420]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a68      	ldr	r2, [pc, #416]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 800261e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a65      	ldr	r2, [pc, #404]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 800262a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d013      	beq.n	8002660 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002638:	f7fe fd9e 	bl	8001178 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002640:	f7fe fd9a 	bl	8001178 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e207      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b5b      	ldr	r3, [pc, #364]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0xc0>
 800265e:	e014      	b.n	800268a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe fd8a 	bl	8001178 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002668:	f7fe fd86 	bl	8001178 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b64      	cmp	r3, #100	; 0x64
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e1f3      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267a:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0xe8>
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d063      	beq.n	800275e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002696:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a2:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d11c      	bne.n	80026e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ae:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d116      	bne.n	80026e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_RCC_OscConfig+0x152>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e1c7      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d2:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4937      	ldr	r1, [pc, #220]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e6:	e03a      	b.n	800275e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f0:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <HAL_RCC_OscConfig+0x244>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f6:	f7fe fd3f 	bl	8001178 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fe:	f7fe fd3b 	bl	8001178 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e1a8      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002710:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4925      	ldr	r1, [pc, #148]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 800272c:	4313      	orrs	r3, r2
 800272e:	600b      	str	r3, [r1, #0]
 8002730:	e015      	b.n	800275e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002732:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCC_OscConfig+0x244>)
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fd1e 	bl	8001178 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002740:	f7fe fd1a 	bl	8001178 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e187      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1f0      	bne.n	8002740 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d036      	beq.n	80027d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d016      	beq.n	80027a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_RCC_OscConfig+0x248>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7fe fcfe 	bl	8001178 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002780:	f7fe fcfa 	bl	8001178 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e167      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_OscConfig+0x240>)
 8002794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x200>
 800279e:	e01b      	b.n	80027d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCC_OscConfig+0x248>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a6:	f7fe fce7 	bl	8001178 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ac:	e00e      	b.n	80027cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ae:	f7fe fce3 	bl	8001178 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d907      	bls.n	80027cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e150      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
 80027c0:	40023800 	.word	0x40023800
 80027c4:	42470000 	.word	0x42470000
 80027c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027cc:	4b88      	ldr	r3, [pc, #544]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 80027ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ea      	bne.n	80027ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8097 	beq.w	8002914 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ea:	4b81      	ldr	r3, [pc, #516]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10f      	bne.n	8002816 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	4b7d      	ldr	r3, [pc, #500]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a7c      	ldr	r2, [pc, #496]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b7a      	ldr	r3, [pc, #488]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002812:	2301      	movs	r3, #1
 8002814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4b77      	ldr	r3, [pc, #476]	; (80029f4 <HAL_RCC_OscConfig+0x474>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d118      	bne.n	8002854 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002822:	4b74      	ldr	r3, [pc, #464]	; (80029f4 <HAL_RCC_OscConfig+0x474>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a73      	ldr	r2, [pc, #460]	; (80029f4 <HAL_RCC_OscConfig+0x474>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282e:	f7fe fca3 	bl	8001178 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002836:	f7fe fc9f 	bl	8001178 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e10c      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <HAL_RCC_OscConfig+0x474>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x2ea>
 800285c:	4b64      	ldr	r3, [pc, #400]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	4a63      	ldr	r2, [pc, #396]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6713      	str	r3, [r2, #112]	; 0x70
 8002868:	e01c      	b.n	80028a4 <HAL_RCC_OscConfig+0x324>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0x30c>
 8002872:	4b5f      	ldr	r3, [pc, #380]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	4a5e      	ldr	r2, [pc, #376]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6713      	str	r3, [r2, #112]	; 0x70
 800287e:	4b5c      	ldr	r3, [pc, #368]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	4a5b      	ldr	r2, [pc, #364]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6713      	str	r3, [r2, #112]	; 0x70
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0x324>
 800288c:	4b58      	ldr	r3, [pc, #352]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	4a57      	ldr	r2, [pc, #348]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	6713      	str	r3, [r2, #112]	; 0x70
 8002898:	4b55      	ldr	r3, [pc, #340]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a54      	ldr	r2, [pc, #336]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 800289e:	f023 0304 	bic.w	r3, r3, #4
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d015      	beq.n	80028d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7fe fc64 	bl	8001178 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7fe fc60 	bl	8001178 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e0cb      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0ee      	beq.n	80028b4 <HAL_RCC_OscConfig+0x334>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d8:	f7fe fc4e 	bl	8001178 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e0:	f7fe fc4a 	bl	8001178 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e0b5      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f6:	4b3e      	ldr	r3, [pc, #248]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ee      	bne.n	80028e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002902:	7dfb      	ldrb	r3, [r7, #23]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002908:	4b39      	ldr	r3, [pc, #228]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	4a38      	ldr	r2, [pc, #224]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 800290e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80a1 	beq.w	8002a60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800291e:	4b34      	ldr	r3, [pc, #208]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b08      	cmp	r3, #8
 8002928:	d05c      	beq.n	80029e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d141      	bne.n	80029b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_RCC_OscConfig+0x478>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe fc1e 	bl	8001178 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fc1a 	bl	8001178 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e087      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002952:	4b27      	ldr	r3, [pc, #156]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	019b      	lsls	r3, r3, #6
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	085b      	lsrs	r3, r3, #1
 8002976:	3b01      	subs	r3, #1
 8002978:	041b      	lsls	r3, r3, #16
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	061b      	lsls	r3, r3, #24
 8002982:	491b      	ldr	r1, [pc, #108]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x478>)
 800298a:	2201      	movs	r2, #1
 800298c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe fbf3 	bl	8001178 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fbef 	bl	8001178 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e05c      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a8:	4b11      	ldr	r3, [pc, #68]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0f0      	beq.n	8002996 <HAL_RCC_OscConfig+0x416>
 80029b4:	e054      	b.n	8002a60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_RCC_OscConfig+0x478>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7fe fbdc 	bl	8001178 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c4:	f7fe fbd8 	bl	8001178 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e045      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_RCC_OscConfig+0x470>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x444>
 80029e2:	e03d      	b.n	8002a60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d107      	bne.n	80029fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e038      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40007000 	.word	0x40007000
 80029f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_RCC_OscConfig+0x4ec>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d028      	beq.n	8002a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d121      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d11a      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d111      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	3b01      	subs	r3, #1
 8002a46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d107      	bne.n	8002a5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800

08002a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0cc      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a84:	4b68      	ldr	r3, [pc, #416]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d90c      	bls.n	8002aac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b65      	ldr	r3, [pc, #404]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0b8      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac4:	4b59      	ldr	r3, [pc, #356]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ace:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002adc:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ae6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae8:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	494d      	ldr	r1, [pc, #308]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d044      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	4b47      	ldr	r3, [pc, #284]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d119      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e07f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e06f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3e:	4b3b      	ldr	r3, [pc, #236]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e067      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f023 0203 	bic.w	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4934      	ldr	r1, [pc, #208]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b60:	f7fe fb0a 	bl	8001178 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b68:	f7fe fb06 	bl	8001178 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e04f      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 020c 	and.w	r2, r3, #12
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d1eb      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b90:	4b25      	ldr	r3, [pc, #148]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d20c      	bcs.n	8002bb8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b20      	ldr	r3, [pc, #128]	; (8002c28 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e032      	b.n	8002c1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4916      	ldr	r1, [pc, #88]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	490e      	ldr	r1, [pc, #56]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bf6:	f000 f821 	bl	8002c3c <HAL_RCC_GetSysClockFreq>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_ClockConfig+0x1bc>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	091b      	lsrs	r3, r3, #4
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	490a      	ldr	r1, [pc, #40]	; (8002c30 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	5ccb      	ldrb	r3, [r1, r3]
 8002c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0e:	4a09      	ldr	r2, [pc, #36]	; (8002c34 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <HAL_RCC_ClockConfig+0x1c8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe fa6a 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40023c00 	.word	0x40023c00
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	08003eb8 	.word	0x08003eb8
 8002c34:	2000022c 	.word	0x2000022c
 8002c38:	20000230 	.word	0x20000230

08002c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c40:	b090      	sub	sp, #64	; 0x40
 8002c42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34
 8002c48:	2300      	movs	r3, #0
 8002c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
 8002c5c:	2b08      	cmp	r3, #8
 8002c5e:	d00d      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0x40>
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	f200 80a1 	bhi.w	8002da8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x34>
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d003      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c6e:	e09b      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c70:	4b53      	ldr	r3, [pc, #332]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c72:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c74:	e09b      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c76:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c7a:	e098      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c7c:	4b4f      	ldr	r3, [pc, #316]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c86:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d028      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c92:	4b4a      	ldr	r3, [pc, #296]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	099b      	lsrs	r3, r3, #6
 8002c98:	2200      	movs	r2, #0
 8002c9a:	623b      	str	r3, [r7, #32]
 8002c9c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ca8:	fb03 f201 	mul.w	r2, r3, r1
 8002cac:	2300      	movs	r3, #0
 8002cae:	fb00 f303 	mul.w	r3, r0, r3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a43      	ldr	r2, [pc, #268]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cb6:	fba0 1202 	umull	r1, r2, r0, r2
 8002cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cbc:	460a      	mov	r2, r1
 8002cbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc2:	4413      	add	r3, r2
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc8:	2200      	movs	r2, #0
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	61fa      	str	r2, [r7, #28]
 8002cce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cd6:	f7fd fa77 	bl	80001c8 <__aeabi_uldivmod>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4613      	mov	r3, r2
 8002ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce2:	e053      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce4:	4b35      	ldr	r3, [pc, #212]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	2200      	movs	r2, #0
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	617a      	str	r2, [r7, #20]
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cf6:	f04f 0b00 	mov.w	fp, #0
 8002cfa:	4652      	mov	r2, sl
 8002cfc:	465b      	mov	r3, fp
 8002cfe:	f04f 0000 	mov.w	r0, #0
 8002d02:	f04f 0100 	mov.w	r1, #0
 8002d06:	0159      	lsls	r1, r3, #5
 8002d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d0c:	0150      	lsls	r0, r2, #5
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	ebb2 080a 	subs.w	r8, r2, sl
 8002d16:	eb63 090b 	sbc.w	r9, r3, fp
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d26:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d2a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d2e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d32:	eb63 0509 	sbc.w	r5, r3, r9
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	00eb      	lsls	r3, r5, #3
 8002d40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d44:	00e2      	lsls	r2, r4, #3
 8002d46:	4614      	mov	r4, r2
 8002d48:	461d      	mov	r5, r3
 8002d4a:	eb14 030a 	adds.w	r3, r4, sl
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	eb45 030b 	adc.w	r3, r5, fp
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d62:	4629      	mov	r1, r5
 8002d64:	028b      	lsls	r3, r1, #10
 8002d66:	4621      	mov	r1, r4
 8002d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d6c:	4621      	mov	r1, r4
 8002d6e:	028a      	lsls	r2, r1, #10
 8002d70:	4610      	mov	r0, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d76:	2200      	movs	r2, #0
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	60fa      	str	r2, [r7, #12]
 8002d7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d80:	f7fd fa22 	bl	80001c8 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x180>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	3301      	adds	r3, #1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002da6:	e002      	b.n	8002dae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da8:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002daa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3740      	adds	r7, #64	; 0x40
 8002db4:	46bd      	mov	sp, r7
 8002db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	00f42400 	.word	0x00f42400
 8002dc4:	017d7840 	.word	0x017d7840

08002dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dcc:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	2000022c 	.word	0x2000022c

08002de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002de4:	f7ff fff0 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	0a9b      	lsrs	r3, r3, #10
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	4903      	ldr	r1, [pc, #12]	; (8002e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40023800 	.word	0x40023800
 8002e04:	08003ec8 	.word	0x08003ec8

08002e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e0c:	f7ff ffdc 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002e10:	4602      	mov	r2, r0
 8002e12:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	0b5b      	lsrs	r3, r3, #13
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	4903      	ldr	r1, [pc, #12]	; (8002e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e1e:	5ccb      	ldrb	r3, [r1, r3]
 8002e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	08003ec8 	.word	0x08003ec8

08002e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e03f      	b.n	8002ec2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe f84c 	bl	8000ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2224      	movs	r2, #36	; 0x24
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fd23 	bl	80038c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d130      	bne.n	8002f46 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_UART_Transmit_IT+0x26>
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e029      	b.n	8002f48 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Transmit_IT+0x38>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e022      	b.n	8002f48 <HAL_UART_Transmit_IT+0x7e>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	88fa      	ldrh	r2, [r7, #6]
 8002f14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	88fa      	ldrh	r2, [r7, #6]
 8002f1a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2221      	movs	r2, #33	; 0x21
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f40:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	e000      	b.n	8002f48 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
  }
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	d11d      	bne.n	8002faa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_UART_Receive_IT+0x26>
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e016      	b.n	8002fac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_UART_Receive_IT+0x38>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e00f      	b.n	8002fac <HAL_UART_Receive_IT+0x58>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fab5 	bl	8003510 <UART_Start_Receive_IT>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	e000      	b.n	8002fac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b0ba      	sub	sp, #232	; 0xe8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d009      	beq.n	800301a <HAL_UART_IRQHandler+0x66>
 8003006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800300a:	f003 0320 	and.w	r3, r3, #32
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fb99 	bl	800374a <UART_Receive_IT>
      return;
 8003018:	e256      	b.n	80034c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800301a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 80de 	beq.w	80031e0 <HAL_UART_IRQHandler+0x22c>
 8003024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d106      	bne.n	800303e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003034:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80d1 	beq.w	80031e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_UART_IRQHandler+0xae>
 800304a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800304e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_UART_IRQHandler+0xd2>
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 0202 	orr.w	r2, r3, #2
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_UART_IRQHandler+0xf6>
 8003092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f043 0204 	orr.w	r2, r3, #4
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d011      	beq.n	80030da <HAL_UART_IRQHandler+0x126>
 80030b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ba:	f003 0320 	and.w	r3, r3, #32
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d105      	bne.n	80030ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	f043 0208 	orr.w	r2, r3, #8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 81ed 	beq.w	80034be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_UART_IRQHandler+0x14e>
 80030f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f4:	f003 0320 	and.w	r3, r3, #32
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 fb24 	bl	800374a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d103      	bne.n	800312e <HAL_UART_IRQHandler+0x17a>
 8003126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800312a:	2b00      	cmp	r3, #0
 800312c:	d04f      	beq.n	80031ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa2c 	bl	800358c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313e:	2b40      	cmp	r3, #64	; 0x40
 8003140:	d141      	bne.n	80031c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3314      	adds	r3, #20
 8003148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003150:	e853 3f00 	ldrex	r3, [r3]
 8003154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800315c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003160:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	3314      	adds	r3, #20
 800316a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800316e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800317a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1d9      	bne.n	8003142 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	2b00      	cmp	r3, #0
 8003194:	d013      	beq.n	80031be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	4a7d      	ldr	r2, [pc, #500]	; (8003390 <HAL_UART_IRQHandler+0x3dc>)
 800319c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fffb 	bl	800219e <HAL_DMA_Abort_IT>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d016      	beq.n	80031dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031b8:	4610      	mov	r0, r2
 80031ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	e00e      	b.n	80031dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f990 	bl	80034e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c4:	e00a      	b.n	80031dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f98c 	bl	80034e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031cc:	e006      	b.n	80031dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f988 	bl	80034e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80031da:	e170      	b.n	80034be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031dc:	bf00      	nop
    return;
 80031de:	e16e      	b.n	80034be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	f040 814a 	bne.w	800347e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8143 	beq.w	800347e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	f000 813c 	beq.w	800347e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003206:	2300      	movs	r3, #0
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003226:	2b40      	cmp	r3, #64	; 0x40
 8003228:	f040 80b4 	bne.w	8003394 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003238:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8140 	beq.w	80034c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003246:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800324a:	429a      	cmp	r2, r3
 800324c:	f080 8139 	bcs.w	80034c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003256:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003262:	f000 8088 	beq.w	8003376 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	330c      	adds	r3, #12
 800326c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800327c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003284:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003292:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800329e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1d9      	bne.n	8003266 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3314      	adds	r3, #20
 80032b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032c4:	f023 0301 	bic.w	r3, r3, #1
 80032c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3314      	adds	r3, #20
 80032d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032e2:	e841 2300 	strex	r3, r2, [r1]
 80032e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e1      	bne.n	80032b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032f8:	e853 3f00 	ldrex	r3, [r3]
 80032fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003300:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003304:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3314      	adds	r3, #20
 800330e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003312:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003314:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003318:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800331a:	e841 2300 	strex	r3, r2, [r1]
 800331e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003320:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1e3      	bne.n	80032ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	330c      	adds	r3, #12
 800333a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003346:	f023 0310 	bic.w	r3, r3, #16
 800334a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003358:	65ba      	str	r2, [r7, #88]	; 0x58
 800335a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800335e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003360:	e841 2300 	strex	r3, r2, [r1]
 8003364:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e3      	bne.n	8003334 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe fea4 	bl	80020be <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800337e:	b29b      	uxth	r3, r3
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	b29b      	uxth	r3, r3
 8003384:	4619      	mov	r1, r3
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8b6 	bl	80034f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800338c:	e099      	b.n	80034c2 <HAL_UART_IRQHandler+0x50e>
 800338e:	bf00      	nop
 8003390:	08003653 	.word	0x08003653
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800339c:	b29b      	uxth	r3, r3
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 808b 	beq.w	80034c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80033b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8086 	beq.w	80034c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	330c      	adds	r3, #12
 80033c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033de:	647a      	str	r2, [r7, #68]	; 0x44
 80033e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033e6:	e841 2300 	strex	r3, r2, [r1]
 80033ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1e3      	bne.n	80033ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3314      	adds	r3, #20
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	e853 3f00 	ldrex	r3, [r3]
 8003400:	623b      	str	r3, [r7, #32]
   return(result);
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	3314      	adds	r3, #20
 8003412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003416:	633a      	str	r2, [r7, #48]	; 0x30
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800341c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e3      	bne.n	80033f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	e853 3f00 	ldrex	r3, [r3]
 8003446:	60fb      	str	r3, [r7, #12]
   return(result);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0310 	bic.w	r3, r3, #16
 800344e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800345c:	61fa      	str	r2, [r7, #28]
 800345e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003460:	69b9      	ldr	r1, [r7, #24]
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	e841 2300 	strex	r3, r2, [r1]
 8003468:	617b      	str	r3, [r7, #20]
   return(result);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e3      	bne.n	8003438 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003470:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003474:	4619      	mov	r1, r3
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f83e 	bl	80034f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800347c:	e023      	b.n	80034c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800347e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_UART_IRQHandler+0x4ea>
 800348a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8ef 	bl	800367a <UART_Transmit_IT>
    return;
 800349c:	e014      	b.n	80034c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <HAL_UART_IRQHandler+0x514>
 80034aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 f92f 	bl	800371a <UART_EndTransmit_IT>
    return;
 80034bc:	e004      	b.n	80034c8 <HAL_UART_IRQHandler+0x514>
    return;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <HAL_UART_IRQHandler+0x514>
      return;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_UART_IRQHandler+0x514>
      return;
 80034c6:	bf00      	nop
  }
}
 80034c8:	37e8      	adds	r7, #232	; 0xe8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop

080034d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	460b      	mov	r3, r1
 8003502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	88fa      	ldrh	r2, [r7, #6]
 8003528:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2222      	movs	r2, #34	; 0x22
 800353a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800355c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f042 0220 	orr.w	r2, r2, #32
 800357c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800358c:	b480      	push	{r7}
 800358e:	b095      	sub	sp, #84	; 0x54
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359e:	e853 3f00 	ldrex	r3, [r3]
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	330c      	adds	r3, #12
 80035b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035b4:	643a      	str	r2, [r7, #64]	; 0x40
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035bc:	e841 2300 	strex	r3, r2, [r1]
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e5      	bne.n	8003594 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3314      	adds	r3, #20
 80035ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	e853 3f00 	ldrex	r3, [r3]
 80035d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f023 0301 	bic.w	r3, r3, #1
 80035de:	64bb      	str	r3, [r7, #72]	; 0x48
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3314      	adds	r3, #20
 80035e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035f0:	e841 2300 	strex	r3, r2, [r1]
 80035f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1e5      	bne.n	80035c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003600:	2b01      	cmp	r3, #1
 8003602:	d119      	bne.n	8003638 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	330c      	adds	r3, #12
 800360a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	e853 3f00 	ldrex	r3, [r3]
 8003612:	60bb      	str	r3, [r7, #8]
   return(result);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f023 0310 	bic.w	r3, r3, #16
 800361a:	647b      	str	r3, [r7, #68]	; 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003624:	61ba      	str	r2, [r7, #24]
 8003626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003628:	6979      	ldr	r1, [r7, #20]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	e841 2300 	strex	r3, r2, [r1]
 8003630:	613b      	str	r3, [r7, #16]
   return(result);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e5      	bne.n	8003604 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003646:	bf00      	nop
 8003648:	3754      	adds	r7, #84	; 0x54
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b084      	sub	sp, #16
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f7ff ff39 	bl	80034e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800367a:	b480      	push	{r7}
 800367c:	b085      	sub	sp, #20
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b21      	cmp	r3, #33	; 0x21
 800368c:	d13e      	bne.n	800370c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003696:	d114      	bne.n	80036c2 <UART_Transmit_IT+0x48>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d110      	bne.n	80036c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	1c9a      	adds	r2, r3, #2
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	621a      	str	r2, [r3, #32]
 80036c0:	e008      	b.n	80036d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	1c59      	adds	r1, r3, #1
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6211      	str	r1, [r2, #32]
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29b      	uxth	r3, r3
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4619      	mov	r1, r3
 80036e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10f      	bne.n	8003708 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003706:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003730:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff fec8 	bl	80034d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b08c      	sub	sp, #48	; 0x30
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b22      	cmp	r3, #34	; 0x22
 800375c:	f040 80ab 	bne.w	80038b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003768:	d117      	bne.n	800379a <UART_Receive_IT+0x50>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d113      	bne.n	800379a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003772:	2300      	movs	r3, #0
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	b29b      	uxth	r3, r3
 8003784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003788:	b29a      	uxth	r2, r3
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	1c9a      	adds	r2, r3, #2
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28
 8003798:	e026      	b.n	80037e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ac:	d007      	beq.n	80037be <UART_Receive_IT+0x74>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10a      	bne.n	80037cc <UART_Receive_IT+0x82>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e008      	b.n	80037de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037d8:	b2da      	uxtb	r2, r3
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	1c5a      	adds	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	4619      	mov	r1, r3
 80037f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d15a      	bne.n	80038b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0220 	bic.w	r2, r2, #32
 800380a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68da      	ldr	r2, [r3, #12]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800381a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695a      	ldr	r2, [r3, #20]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	2b01      	cmp	r3, #1
 800383a:	d135      	bne.n	80038a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	613b      	str	r3, [r7, #16]
   return(result);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	f023 0310 	bic.w	r3, r3, #16
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	330c      	adds	r3, #12
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	623a      	str	r2, [r7, #32]
 8003864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003866:	69f9      	ldr	r1, [r7, #28]
 8003868:	6a3a      	ldr	r2, [r7, #32]
 800386a:	e841 2300 	strex	r3, r2, [r1]
 800386e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1e5      	bne.n	8003842 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	2b10      	cmp	r3, #16
 8003882:	d10a      	bne.n	800389a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003884:	2300      	movs	r3, #0
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fe29 	bl	80034f8 <HAL_UARTEx_RxEventCallback>
 80038a6:	e002      	b.n	80038ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fc fe57 	bl	800055c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e002      	b.n	80038b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3730      	adds	r7, #48	; 0x30
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038c4:	b0c0      	sub	sp, #256	; 0x100
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038dc:	68d9      	ldr	r1, [r3, #12]
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	ea40 0301 	orr.w	r3, r0, r1
 80038e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	431a      	orrs	r2, r3
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	4313      	orrs	r3, r2
 8003908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003918:	f021 010c 	bic.w	r1, r1, #12
 800391c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003926:	430b      	orrs	r3, r1
 8003928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393a:	6999      	ldr	r1, [r3, #24]
 800393c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	ea40 0301 	orr.w	r3, r0, r1
 8003946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4b8f      	ldr	r3, [pc, #572]	; (8003b8c <UART_SetConfig+0x2cc>)
 8003950:	429a      	cmp	r2, r3
 8003952:	d005      	beq.n	8003960 <UART_SetConfig+0xa0>
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b8d      	ldr	r3, [pc, #564]	; (8003b90 <UART_SetConfig+0x2d0>)
 800395c:	429a      	cmp	r2, r3
 800395e:	d104      	bne.n	800396a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003960:	f7ff fa52 	bl	8002e08 <HAL_RCC_GetPCLK2Freq>
 8003964:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003968:	e003      	b.n	8003972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800396a:	f7ff fa39 	bl	8002de0 <HAL_RCC_GetPCLK1Freq>
 800396e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397c:	f040 810c 	bne.w	8003b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003984:	2200      	movs	r2, #0
 8003986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800398a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800398e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003992:	4622      	mov	r2, r4
 8003994:	462b      	mov	r3, r5
 8003996:	1891      	adds	r1, r2, r2
 8003998:	65b9      	str	r1, [r7, #88]	; 0x58
 800399a:	415b      	adcs	r3, r3
 800399c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800399e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80039a2:	4621      	mov	r1, r4
 80039a4:	eb12 0801 	adds.w	r8, r2, r1
 80039a8:	4629      	mov	r1, r5
 80039aa:	eb43 0901 	adc.w	r9, r3, r1
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039c2:	4690      	mov	r8, r2
 80039c4:	4699      	mov	r9, r3
 80039c6:	4623      	mov	r3, r4
 80039c8:	eb18 0303 	adds.w	r3, r8, r3
 80039cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039d0:	462b      	mov	r3, r5
 80039d2:	eb49 0303 	adc.w	r3, r9, r3
 80039d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039ee:	460b      	mov	r3, r1
 80039f0:	18db      	adds	r3, r3, r3
 80039f2:	653b      	str	r3, [r7, #80]	; 0x50
 80039f4:	4613      	mov	r3, r2
 80039f6:	eb42 0303 	adc.w	r3, r2, r3
 80039fa:	657b      	str	r3, [r7, #84]	; 0x54
 80039fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a04:	f7fc fbe0 	bl	80001c8 <__aeabi_uldivmod>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4b61      	ldr	r3, [pc, #388]	; (8003b94 <UART_SetConfig+0x2d4>)
 8003a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	011c      	lsls	r4, r3, #4
 8003a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003a28:	4642      	mov	r2, r8
 8003a2a:	464b      	mov	r3, r9
 8003a2c:	1891      	adds	r1, r2, r2
 8003a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a30:	415b      	adcs	r3, r3
 8003a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a38:	4641      	mov	r1, r8
 8003a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a3e:	4649      	mov	r1, r9
 8003a40:	eb43 0b01 	adc.w	fp, r3, r1
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	f04f 0300 	mov.w	r3, #0
 8003a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a58:	4692      	mov	sl, r2
 8003a5a:	469b      	mov	fp, r3
 8003a5c:	4643      	mov	r3, r8
 8003a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a66:	464b      	mov	r3, r9
 8003a68:	eb4b 0303 	adc.w	r3, fp, r3
 8003a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a84:	460b      	mov	r3, r1
 8003a86:	18db      	adds	r3, r3, r3
 8003a88:	643b      	str	r3, [r7, #64]	; 0x40
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	eb42 0303 	adc.w	r3, r2, r3
 8003a90:	647b      	str	r3, [r7, #68]	; 0x44
 8003a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a9a:	f7fc fb95 	bl	80001c8 <__aeabi_uldivmod>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	4b3b      	ldr	r3, [pc, #236]	; (8003b94 <UART_SetConfig+0x2d4>)
 8003aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	2264      	movs	r2, #100	; 0x64
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	1acb      	subs	r3, r1, r3
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003aba:	4b36      	ldr	r3, [pc, #216]	; (8003b94 <UART_SetConfig+0x2d4>)
 8003abc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ac8:	441c      	add	r4, r3
 8003aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003adc:	4642      	mov	r2, r8
 8003ade:	464b      	mov	r3, r9
 8003ae0:	1891      	adds	r1, r2, r2
 8003ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ae4:	415b      	adcs	r3, r3
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003aec:	4641      	mov	r1, r8
 8003aee:	1851      	adds	r1, r2, r1
 8003af0:	6339      	str	r1, [r7, #48]	; 0x30
 8003af2:	4649      	mov	r1, r9
 8003af4:	414b      	adcs	r3, r1
 8003af6:	637b      	str	r3, [r7, #52]	; 0x34
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b04:	4659      	mov	r1, fp
 8003b06:	00cb      	lsls	r3, r1, #3
 8003b08:	4651      	mov	r1, sl
 8003b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b0e:	4651      	mov	r1, sl
 8003b10:	00ca      	lsls	r2, r1, #3
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	4642      	mov	r2, r8
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b20:	464b      	mov	r3, r9
 8003b22:	460a      	mov	r2, r1
 8003b24:	eb42 0303 	adc.w	r3, r2, r3
 8003b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b40:	460b      	mov	r3, r1
 8003b42:	18db      	adds	r3, r3, r3
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b46:	4613      	mov	r3, r2
 8003b48:	eb42 0303 	adc.w	r3, r2, r3
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b56:	f7fc fb37 	bl	80001c8 <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4b0d      	ldr	r3, [pc, #52]	; (8003b94 <UART_SetConfig+0x2d4>)
 8003b60:	fba3 1302 	umull	r1, r3, r3, r2
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	2164      	movs	r1, #100	; 0x64
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	3332      	adds	r3, #50	; 0x32
 8003b72:	4a08      	ldr	r2, [pc, #32]	; (8003b94 <UART_SetConfig+0x2d4>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	f003 0207 	and.w	r2, r3, #7
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4422      	add	r2, r4
 8003b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b88:	e105      	b.n	8003d96 <UART_SetConfig+0x4d6>
 8003b8a:	bf00      	nop
 8003b8c:	40011000 	.word	0x40011000
 8003b90:	40011400 	.word	0x40011400
 8003b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003baa:	4642      	mov	r2, r8
 8003bac:	464b      	mov	r3, r9
 8003bae:	1891      	adds	r1, r2, r2
 8003bb0:	6239      	str	r1, [r7, #32]
 8003bb2:	415b      	adcs	r3, r3
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bba:	4641      	mov	r1, r8
 8003bbc:	1854      	adds	r4, r2, r1
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	eb43 0501 	adc.w	r5, r3, r1
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	00eb      	lsls	r3, r5, #3
 8003bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bd2:	00e2      	lsls	r2, r4, #3
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	461d      	mov	r5, r3
 8003bd8:	4643      	mov	r3, r8
 8003bda:	18e3      	adds	r3, r4, r3
 8003bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003be0:	464b      	mov	r3, r9
 8003be2:	eb45 0303 	adc.w	r3, r5, r3
 8003be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c06:	4629      	mov	r1, r5
 8003c08:	008b      	lsls	r3, r1, #2
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c10:	4621      	mov	r1, r4
 8003c12:	008a      	lsls	r2, r1, #2
 8003c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c18:	f7fc fad6 	bl	80001c8 <__aeabi_uldivmod>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4b60      	ldr	r3, [pc, #384]	; (8003da4 <UART_SetConfig+0x4e4>)
 8003c22:	fba3 2302 	umull	r2, r3, r3, r2
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	011c      	lsls	r4, r3, #4
 8003c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c3c:	4642      	mov	r2, r8
 8003c3e:	464b      	mov	r3, r9
 8003c40:	1891      	adds	r1, r2, r2
 8003c42:	61b9      	str	r1, [r7, #24]
 8003c44:	415b      	adcs	r3, r3
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c4c:	4641      	mov	r1, r8
 8003c4e:	1851      	adds	r1, r2, r1
 8003c50:	6139      	str	r1, [r7, #16]
 8003c52:	4649      	mov	r1, r9
 8003c54:	414b      	adcs	r3, r1
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c64:	4659      	mov	r1, fp
 8003c66:	00cb      	lsls	r3, r1, #3
 8003c68:	4651      	mov	r1, sl
 8003c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c6e:	4651      	mov	r1, sl
 8003c70:	00ca      	lsls	r2, r1, #3
 8003c72:	4610      	mov	r0, r2
 8003c74:	4619      	mov	r1, r3
 8003c76:	4603      	mov	r3, r0
 8003c78:	4642      	mov	r2, r8
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c80:	464b      	mov	r3, r9
 8003c82:	460a      	mov	r2, r1
 8003c84:	eb42 0303 	adc.w	r3, r2, r3
 8003c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ca4:	4649      	mov	r1, r9
 8003ca6:	008b      	lsls	r3, r1, #2
 8003ca8:	4641      	mov	r1, r8
 8003caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cae:	4641      	mov	r1, r8
 8003cb0:	008a      	lsls	r2, r1, #2
 8003cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003cb6:	f7fc fa87 	bl	80001c8 <__aeabi_uldivmod>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	4b39      	ldr	r3, [pc, #228]	; (8003da4 <UART_SetConfig+0x4e4>)
 8003cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	2164      	movs	r1, #100	; 0x64
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	3332      	adds	r3, #50	; 0x32
 8003cd2:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <UART_SetConfig+0x4e4>)
 8003cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cde:	441c      	add	r4, r3
 8003ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ce8:	677a      	str	r2, [r7, #116]	; 0x74
 8003cea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cee:	4642      	mov	r2, r8
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	1891      	adds	r1, r2, r2
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	415b      	adcs	r3, r3
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cfe:	4641      	mov	r1, r8
 8003d00:	1851      	adds	r1, r2, r1
 8003d02:	6039      	str	r1, [r7, #0]
 8003d04:	4649      	mov	r1, r9
 8003d06:	414b      	adcs	r3, r1
 8003d08:	607b      	str	r3, [r7, #4]
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d16:	4659      	mov	r1, fp
 8003d18:	00cb      	lsls	r3, r1, #3
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d20:	4651      	mov	r1, sl
 8003d22:	00ca      	lsls	r2, r1, #3
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	4603      	mov	r3, r0
 8003d2a:	4642      	mov	r2, r8
 8003d2c:	189b      	adds	r3, r3, r2
 8003d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d30:	464b      	mov	r3, r9
 8003d32:	460a      	mov	r2, r1
 8003d34:	eb42 0303 	adc.w	r3, r2, r3
 8003d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	663b      	str	r3, [r7, #96]	; 0x60
 8003d44:	667a      	str	r2, [r7, #100]	; 0x64
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d52:	4649      	mov	r1, r9
 8003d54:	008b      	lsls	r3, r1, #2
 8003d56:	4641      	mov	r1, r8
 8003d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	008a      	lsls	r2, r1, #2
 8003d60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d64:	f7fc fa30 	bl	80001c8 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <UART_SetConfig+0x4e4>)
 8003d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2164      	movs	r1, #100	; 0x64
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	3332      	adds	r3, #50	; 0x32
 8003d80:	4a08      	ldr	r2, [pc, #32]	; (8003da4 <UART_SetConfig+0x4e4>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	095b      	lsrs	r3, r3, #5
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4422      	add	r2, r4
 8003d94:	609a      	str	r2, [r3, #8]
}
 8003d96:	bf00      	nop
 8003d98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da2:	bf00      	nop
 8003da4:	51eb851f 	.word	0x51eb851f

08003da8 <__libc_init_array>:
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	4d0d      	ldr	r5, [pc, #52]	; (8003de0 <__libc_init_array+0x38>)
 8003dac:	4c0d      	ldr	r4, [pc, #52]	; (8003de4 <__libc_init_array+0x3c>)
 8003dae:	1b64      	subs	r4, r4, r5
 8003db0:	10a4      	asrs	r4, r4, #2
 8003db2:	2600      	movs	r6, #0
 8003db4:	42a6      	cmp	r6, r4
 8003db6:	d109      	bne.n	8003dcc <__libc_init_array+0x24>
 8003db8:	4d0b      	ldr	r5, [pc, #44]	; (8003de8 <__libc_init_array+0x40>)
 8003dba:	4c0c      	ldr	r4, [pc, #48]	; (8003dec <__libc_init_array+0x44>)
 8003dbc:	f000 f820 	bl	8003e00 <_init>
 8003dc0:	1b64      	subs	r4, r4, r5
 8003dc2:	10a4      	asrs	r4, r4, #2
 8003dc4:	2600      	movs	r6, #0
 8003dc6:	42a6      	cmp	r6, r4
 8003dc8:	d105      	bne.n	8003dd6 <__libc_init_array+0x2e>
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dd0:	4798      	blx	r3
 8003dd2:	3601      	adds	r6, #1
 8003dd4:	e7ee      	b.n	8003db4 <__libc_init_array+0xc>
 8003dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dda:	4798      	blx	r3
 8003ddc:	3601      	adds	r6, #1
 8003dde:	e7f2      	b.n	8003dc6 <__libc_init_array+0x1e>
 8003de0:	08003ed8 	.word	0x08003ed8
 8003de4:	08003ed8 	.word	0x08003ed8
 8003de8:	08003ed8 	.word	0x08003ed8
 8003dec:	08003edc 	.word	0x08003edc

08003df0 <memset>:
 8003df0:	4402      	add	r2, r0
 8003df2:	4603      	mov	r3, r0
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d100      	bne.n	8003dfa <memset+0xa>
 8003df8:	4770      	bx	lr
 8003dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfe:	e7f9      	b.n	8003df4 <memset+0x4>

08003e00 <_init>:
 8003e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e02:	bf00      	nop
 8003e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e06:	bc08      	pop	{r3}
 8003e08:	469e      	mov	lr, r3
 8003e0a:	4770      	bx	lr

08003e0c <_fini>:
 8003e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0e:	bf00      	nop
 8003e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e12:	bc08      	pop	{r3}
 8003e14:	469e      	mov	lr, r3
 8003e16:	4770      	bx	lr
